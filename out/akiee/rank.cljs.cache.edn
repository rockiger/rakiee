;; Analyzed by ClojureScript 0.0-2725
{:defs {down-rank {:protocol-inline nil, :name akiee.rank/down-rank, :variadic false, :file "src/akiee/rank.cljs", :end-column 17, :method-params ([ky]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ky])), :doc "String ->\n  Consumes a key-String ky;\n  changes the rank of the corresponding node to rank lower", :test true}, up-rank {:protocol-inline nil, :name akiee.rank/up-rank, :variadic false, :file "src/akiee/rank.cljs", :end-column 15, :method-params ([ky]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ky])), :doc "String ->\n  Consumes a key-String ky;\n  changes the rank of the corresponding node to rank higher", :test true}, move-rank! {:protocol-inline nil, :name akiee.rank/move-rank!, :variadic false, :file "src/akiee/rank.cljs", :end-column 18, :method-params ([ky direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ky direction])), :doc "String Integer Integer -> ?", :test true}, task-by-pos {:protocol-inline nil, :name akiee.rank/task-by-pos, :variadic false, :file "src/akiee/rank.cljs", :end-column 19, :method-params ([pos] [pos ls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pos] [pos ls])), :doc "Integer -> Node\n  Returns node at pos\n  -------------------------\n  Integer ListState -> Node\n  Returns node at pos", :test true}}, :name akiee.rank, :doc nil, :excludes #{}, :use-macros {is cljs.test, deftest cljs.test}, :require-macros {cljs.test cljs.test}, :uses {DOING akiee.constants, DONE akiee.constants, TODO akiee.constants, ALL akiee.constants}, :requires {cljs.test cljs.test, no akiee.node, akiee.node akiee.node, akiee.constants akiee.constants, akiee.app-db akiee.app-db, db akiee.app-db}, :imports nil}