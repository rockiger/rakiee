;; Analyzed by ClojureScript 0.0-2725
{:defs {->repeat {:protocol-inline nil, :name akiee.node/->repeat, :variadic false, :file "src/akiee/node.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "String -> RepeatInfo\n  consumes a String s with repeat information, parses this String and produces a RepeatInfo", :test true}, ->nodes {:protocol-inline nil, :name akiee.node/->nodes, :variadic false, :file "src/akiee/node.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "String -> ListOfNodes\n  consumes the path p to the task file and produces a list of nodes\n  TODO find way to test, without :key", :test true}, ->node {:protocol-inline nil, :name akiee.node/->node, :variadic false, :file "src/akiee/node.cljs", :end-column 14, :method-params ([ts hl pro r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 4}), :line 123, :end-line 123, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ts hl pro r])), :doc "TaskState String String -> Node\n  Consumes a TaskState ts a headline hl, a project pro, a Rank r;\n  creates a node", :test true}, n1 {:file "src/akiee/node.cljs", :line 251, :column 1, :end-line 251, :end-column 9, :test true, :name akiee.node/n1}, ->timestamp {:protocol-inline nil, :name akiee.node/->timestamp, :variadic false, :file "src/akiee/node.cljs", :end-column 19, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d])), :doc "Date -> String\n  consumes a clojurescript date and produces a org-mode timestamp", :test true}, week {:file "src/akiee/node.cljs", :line 18, :column 1, :end-line 18, :end-column 11, :test true, :name akiee.node/week}, n3 {:file "src/akiee/node.cljs", :line 253, :column 1, :end-line 253, :end-column 9, :test true, :name akiee.node/n3}, reps-string {:protocol-inline nil, :name akiee.node/reps-string, :variadic false, :file "src/akiee/node.cljs", :end-column 19, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 1}), :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Node -> String\n  Consumes a Node n and produces the Repeat String based on the n's RepeatInfo", :test true}, higher-rank? {:protocol-inline nil, :name akiee.node/higher-rank?, :variadic false, :file "src/akiee/node.cljs", :end-column 20, :method-params ([n1 n2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 216, :end-line 216, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n1 n2])), :doc "Node Node -> Boolean\n  Determens if Node n1 has a higher Rank than Node n2", :test true}, lon->md {:protocol-inline nil, :name akiee.node/lon->md, :variadic false, :file "src/akiee/node.cljs", :end-column 15, :method-params ([lon]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 1}), :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lon])), :test true}, n4 {:file "src/akiee/node.cljs", :line 254, :column 1, :end-line 254, :end-column 9, :test true, :name akiee.node/n4}, array->vec {:protocol-inline nil, :name akiee.node/array->vec, :variadic false, :file "src/akiee/node.cljs", :end-column 18, :method-params ([v a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v a])), :doc "JsArray Vector -> Vector\n  consumes a javascript array a and Vector v and produces a vector\n  TODO make this more robust and general", :test true}, n2 {:file "src/akiee/node.cljs", :line 252, :column 1, :end-line 252, :end-column 9, :test true, :name akiee.node/n2}, tags-string {:protocol-inline nil, :name akiee.node/tags-string, :variadic false, :file "src/akiee/node.cljs", :end-column 19, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any string}, :variadic false, :max-fixed-arity 1}), :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Node -> String\n  Consumes a Node n and produces the comma seperated String based on the n's tags", :test true}, node= {:protocol-inline nil, :name akiee.node/node=, :variadic false, :file "src/akiee/node.cljs", :end-column 13, :method-params ([n1 n2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n1 n2])), :doc "Node Node -> Boolean\n  Compares 2 Nodes n1 n2, the :key of the nodes is ignored,\n  because it's random", :test true}, org {:file "src/akiee/node.cljs", :line 12, :column 1, :end-line 12, :end-column 10, :test true, :name akiee.node/org}, project-helper {:protocol-inline nil, :name akiee.node/project-helper, :variadic false, :file "src/akiee/node.cljs", :end-column 24, :method-params ([lon n pr]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :methods ({:variadic false, :max-fixed-arity 3}), :line 156, :end-line 156, :max-fixed-arity 3, :fn-var true, :arglists (quote ([lon n pr])), :test true}, project {:protocol-inline nil, :name akiee.node/project, :variadic false, :file "src/akiee/node.cljs", :end-column 15, :method-params ([lon n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lon n])), :doc "ListOfNodes Node String -> String\n  Consumes a lon, a Node n and a project name pr returns the project of n", :test true}, lon {:file "src/akiee/node.cljs", :line 162, :column 1, :end-line 162, :end-column 10, :test true, :name akiee.node/lon}, jsnode->node {:protocol-inline nil, :name akiee.node/jsnode->node, :variadic false, :file "src/akiee/node.cljs", :end-column 20, :method-params ([jn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([jn])), :doc "JsNode -> Node\n  consumes a javascript org-node (object) jn and produces a node\n  TODO make this more robust and general", :test true}, parse-file {:file "src/akiee/node.cljs", :line 14, :column 1, :end-line 14, :end-column 17, :test true, :name akiee.node/parse-file}, ->key {:protocol-inline nil, :name akiee.node/->key, :variadic false, :file "src/akiee/node.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Nil -> String\n  Returns a unique key for new nodes", :test true}}, :name akiee.node, :doc nil, :excludes #{}, :use-macros {is cljs.test, deftest cljs.test}, :require-macros {cljs.test cljs.test}, :uses {join clojure.string, DOING akiee.constants, DONE akiee.constants, trim clojure.string, TODO akiee.constants, ALL akiee.constants}, :requires {akiee.datadefinitions akiee.datadefinitions, nj cljs.nodejs, fo akiee.fileoperations, akiee.fileoperations akiee.fileoperations, dd akiee.datadefinitions, cljs.test cljs.test, akiee.constants akiee.constants, cljs.nodejs cljs.nodejs, s clojure.string, clojure.string clojure.string}, :imports nil}