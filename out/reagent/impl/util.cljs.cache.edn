;; Analyzed by ClojureScript 0.0-2725
{:defs {get-props {:protocol-inline nil, :name reagent.impl.util/get-props, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 17, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, get-argv {:protocol-inline nil, :name reagent.impl.util/get-argv, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, merge-props {:protocol-inline nil, :name reagent.impl.util/merge-props, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2])), :test true}, re-render-component {:protocol-inline nil, :name reagent.impl.util/re-render-component, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 27, :method-params ([comp container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp container])), :test true}, force-update-all {:protocol-inline nil, :name reagent.impl.util/force-update-all, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag string, :variadic false, :max-fixed-arity 0}), :line 157, :end-line 157, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, get-root-id {:protocol-inline nil, :name reagent.impl.util/get-root-id, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 19, :method-params ([cont]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cont])), :test true}, capitalize {:protocol-inline nil, :name reagent.impl.util/capitalize, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, cached-react-class {:protocol-inline nil, :name reagent.impl.util/cached-react-class, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 26, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, dash-to-camel {:protocol-inline nil, :name reagent.impl.util/dash-to-camel, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 21, :method-params ([dashed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any string}, :variadic false, :max-fixed-arity 1}), :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dashed])), :test true}, reagent-component? {:protocol-inline nil, :name reagent.impl.util/reagent-component?, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 26, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, dont-camel-case {:file "out/reagent/impl/util.cljs", :line 51, :column 1, :end-line 51, :end-column 22, :test true, :name reagent.impl.util/dont-camel-case}, merge-style {:protocol-inline nil, :private true, :name reagent.impl.util/merge-style, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 20, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2])), :test true}, memoize-1 {:protocol-inline nil, :name reagent.impl.util/memoize-1, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 17, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, unmount-component-at-node {:protocol-inline nil, :name reagent.impl.util/unmount-component-at-node, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 33, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container])), :test true}, ->partial-ifn {:protocol-inline nil, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/->partial-ifn, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 22, :method-params ([f args p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag reagent.impl.util/partial-ifn, :variadic false, :max-fixed-arity 3}), :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f args p])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :test true}, render-component {:protocol-inline nil, :name reagent.impl.util/render-component, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 24, :method-params ([comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 141, :end-line 141, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container callback])), :test true}, extract-children {:protocol-inline nil, :name reagent.impl.util/extract-children, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 24, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/Subvec clj-nil}, :variadic false, :max-fixed-arity 1}), :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, react-id-name {:file "out/reagent/impl/util.cljs", :line 113, :column 1, :end-line 113, :end-column 20, :test true, :name reagent.impl.util/react-id-name}, extract-props {:protocol-inline nil, :name reagent.impl.util/extract-props, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 21, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, equal-args {:protocol-inline nil, :name reagent.impl.util/equal-args, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 18, :method-params ([v1 v2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean any}, :variadic false, :max-fixed-arity 2}), :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v1 v2])), :test true}, partial-ifn {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/partial-ifn, :file "out/reagent/impl/util.cljs", :end-column 22, :type true, :column 10, :line 68, :record false, :end-line 68, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, get-children {:protocol-inline nil, :name reagent.impl.util/get-children, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 20, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/Subvec clj-nil}, :variadic false, :max-fixed-arity 1}), :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, roots {:file "out/reagent/impl/util.cljs", :line 125, :column 1, :end-line 125, :end-column 12, :test true, :name reagent.impl.util/roots}, merge-class {:protocol-inline nil, :private true, :name reagent.impl.util/merge-class, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 20, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2])), :test true}, doc-node-type {:file "out/reagent/impl/util.cljs", :line 112, :column 1, :end-line 112, :end-column 20, :test true, :name reagent.impl.util/doc-node-type}, is-client {:file "out/reagent/impl/util.cljs", :line 6, :column 1, :end-line 6, :end-column 16, :test true, :name reagent.impl.util/is-client}, get-react-node {:protocol-inline nil, :name reagent.impl.util/get-react-node, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 22, :method-params ([cont]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cont])), :test true}, clj-ifn? {:protocol-inline nil, :name reagent.impl.util/clj-ifn?, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, cache-react-class {:protocol-inline nil, :name reagent.impl.util/cache-react-class, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 25, :method-params ([c constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c constructor])), :test true}, shallow-equal-maps {:protocol-inline nil, :name reagent.impl.util/shallow-equal-maps, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 26, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean any}, :variadic false, :max-fixed-arity 2}), :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, identical-ish? {:protocol-inline nil, :name reagent.impl.util/identical-ish?, :variadic false, :file "out/reagent/impl/util.cljs", :end-column 22, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, -not-found {:file "out/reagent/impl/util.cljs", :line 165, :column 1, :end-line 165, :end-column 17, :test true, :name reagent.impl.util/-not-found}, *always-update* {:file "out/reagent/impl/util.cljs", :line 110, :column 1, :end-line 110, :end-column 36, :dynamic true, :declared true, :test true, :name reagent.impl.util/*always-update*}}, :name reagent.impl.util, :doc nil, :excludes #{}, :use-macros {log reagent.debug, dbg reagent.debug, .' reagent.interop, .! reagent.interop}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses nil, :requires {string clojure.string, clojure.string clojure.string, reagent.interop reagent.interop, reagent.debug reagent.debug}, :imports nil}