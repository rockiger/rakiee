;; Analyzed by ClojureScript 0.0-2725
{:defs {valid-tag? {:protocol-inline nil, :name reagent.impl.template/valid-tag?, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, get-wrapper {:protocol-inline nil, :name reagent.impl.template/get-wrapper, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 19, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag])), :test true}, as-component {:protocol-inline nil, :name reagent.impl.template/as-component, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 20, :method-params ([x] [x level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1} {:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x] [x level])), :test true}, get-key {:protocol-inline nil, :name reagent.impl.template/get-key, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, re-tag {:file "out/reagent/impl/template.cljs", :line 13, :column 1, :end-line 15, :end-column 10, :doc "Regular expression that parses a CSS-style id and class\n             from a tag name.", :test true, :name reagent.impl.template/re-tag}, input-component? {:protocol-inline nil, :name reagent.impl.template/input-component?, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, undash-prop-name {:protocol-inline nil, :name reagent.impl.template/undash-prop-name, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 24, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any string}, :variadic false, :max-fixed-arity 1}), :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :test true}, input-did-update {:protocol-inline nil, :name reagent.impl.template/input-did-update, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, input-render-setup {:protocol-inline nil, :name reagent.impl.template/input-render-setup, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 26, :method-params ([this jsprops]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this jsprops])), :test true}, cached-wrapper {:file "out/reagent/impl/template.cljs", :line 182, :column 1, :end-line 182, :end-column 21, :test true, :name reagent.impl.template/cached-wrapper}, wrapped-render {:protocol-inline nil, :name reagent.impl.template/wrapped-render, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 22, :method-params ([this comp id-class input-setup]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 4}), :line 129, :end-line 129, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this comp id-class input-setup])), :test true}, hiccup-tag? {:protocol-inline nil, :name reagent.impl.template/hiccup-tag?, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, set-id-class {:protocol-inline nil, :name reagent.impl.template/set-id-class, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 20, :method-params ([props p__11721]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2}), :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props [id class]])), :test true}, as-class {:protocol-inline nil, :name reagent.impl.template/as-class, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 16, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag])), :test true}, vec-to-comp {:protocol-inline nil, :name reagent.impl.template/vec-to-comp, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 19, :method-params ([v level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v level])), :test true}, seq-ctx {:file "out/reagent/impl/template.cljs", :line 223, :column 1, :end-line 223, :end-column 14, :test true, :name reagent.impl.template/seq-ctx}, fn-to-class {:protocol-inline nil, :name reagent.impl.template/fn-to-class, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 19, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, convert-props {:protocol-inline nil, :name reagent.impl.template/convert-props, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 21, :method-params ([props id-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props id-class])), :test true}, convert-args {:protocol-inline nil, :name reagent.impl.template/convert-args, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 20, :method-params ([argv first-child level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any array}, :variadic false, :max-fixed-arity 3}), :line 258, :end-line 258, :max-fixed-arity 3, :fn-var true, :arglists (quote ([argv first-child level])), :test true}, parse-tag {:protocol-inline nil, :name reagent.impl.template/parse-tag, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 17, :method-params ([hiccup-tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hiccup-tag])), :test true}, to-js-val {:protocol-inline nil, :name reagent.impl.template/to-js-val, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil object any array string function clj-nil}, :variadic false, :max-fixed-arity 1}), :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, wrapped-should-update {:protocol-inline nil, :name reagent.impl.template/wrapped-should-update, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 29, :method-params ([c nextprops nextstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 3}), :line 143, :end-line 143, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c nextprops nextstate])), :test true}, input-handle-change {:protocol-inline nil, :name reagent.impl.template/input-handle-change, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 27, :method-params ([this on-change e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 91, :end-line 91, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this on-change e])), :test true}, wrap-component {:protocol-inline nil, :name reagent.impl.template/wrap-component, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 22, :method-params ([comp extras name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 154, :end-line 154, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp extras name])), :test true}, add-input-methods {:protocol-inline nil, :name reagent.impl.template/add-input-methods, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 25, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :test true}, cached-style-name {:file "out/reagent/impl/template.cljs", :line 51, :column 1, :end-line 51, :end-column 24, :test true, :name reagent.impl.template/cached-style-name}, attr-aliases {:file "out/reagent/impl/template.cljs", :line 17, :column 1, :end-line 17, :end-column 19, :test true, :name reagent.impl.template/attr-aliases}, convert-prop-value {:protocol-inline nil, :name reagent.impl.template/convert-prop-value, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil object any array string function clj-nil}, :variadic false, :max-fixed-arity 1}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, cached-prop-name {:file "out/reagent/impl/template.cljs", :line 50, :column 1, :end-line 50, :end-column 23, :test true, :name reagent.impl.template/cached-prop-name}, warn-on-deref {:protocol-inline nil, :name reagent.impl.template/warn-on-deref, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 225, :end-line 225, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, expand-seq {:protocol-inline nil, :name reagent.impl.template/expand-seq, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 18, :method-params ([s level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag array, :variadic false, :max-fixed-arity 2}), :line 251, :end-line 251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s level])), :test true}, create-class {:protocol-inline nil, :name reagent.impl.template/create-class, :variadic false, :file "out/reagent/impl/template.cljs", :end-column 20, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :test true}}, :name reagent.impl.template, :doc nil, :excludes #{}, :use-macros {log reagent.debug, dbg reagent.debug, .' reagent.interop, prn reagent.debug, dev? reagent.debug, println reagent.debug, .! reagent.interop}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :uses {is-client reagent.impl.util}, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.interop reagent.interop, reagent.ratom reagent.ratom, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, ratom reagent.ratom, string clojure.string, batch reagent.impl.batching, reagent.debug reagent.debug, clojure.string clojure.string}, :imports nil}