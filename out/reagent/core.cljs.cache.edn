;; Analyzed by ClojureScript 0.0-2725
{:defs {current-component {:protocol-inline nil, :name reagent.core/current-component, :variadic false, :file "out/reagent/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current React component (a.k.a this) in a component\n  function.", :test true}, as-component {:protocol-inline nil, :name reagent.core/as-component, :variadic false, :file "out/reagent/core.cljs", :end-column 20, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Turns a vector of Hiccup syntax into a React component. Returns form unchanged if it is not a vector.", :test true}, atom {:protocol-inline nil, :name reagent.core/atom, :variadic true, :file "out/reagent/core.cljs", :end-column 12, :method-params ([x] [x rest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag reagent.ratom/RAtom, :variadic false, :max-fixed-arity 1} {:tag any, :variadic true, :max-fixed-arity 1}), :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x] [x & rest])), :doc "Like clojure.core/atom, except that it keeps track of derefs.\nReagent components that derefs one of these are automatically\nre-rendered.", :test true}, merge-props {:protocol-inline nil, :name reagent.core/merge-props, :variadic false, :file "out/reagent/core.cljs", :end-column 19, :method-params ([defaults props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([defaults props])), :doc "Utility function that merges two maps, handling :class and :style\nspecially, like React's transferPropsTo.", :test true}, force-update-all {:protocol-inline nil, :name reagent.core/force-update-all, :variadic false, :file "out/reagent/core.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag string, :variadic false, :max-fixed-arity 0}), :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, next-tick {:protocol-inline nil, :name reagent.core/next-tick, :variadic false, :file "out/reagent/core.cljs", :end-column 17, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Run f using requestAnimationFrame or equivalent.", :test true}, props {:protocol-inline nil, :name reagent.core/props, :variadic false, :file "out/reagent/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the props passed to a component.", :test true}, flush {:protocol-inline nil, :name reagent.core/flush, :variadic false, :file "out/reagent/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 123, :end-line 123, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Render dirty components immediately to the DOM.\n\nNote that this may not work in event handlers, since React.js does\nbatching of updates there.", :test true}, children {:protocol-inline nil, :name reagent.core/children, :variadic false, :file "out/reagent/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/Subvec clj-nil}, :variadic false, :max-fixed-arity 1}), :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the children passed to a component.", :test true}, unmount-component-at-node {:protocol-inline nil, :name reagent.core/unmount-component-at-node, :variadic false, :file "out/reagent/core.cljs", :end-column 33, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container])), :doc "Remove a component from the given DOM node.", :test true}, render-component {:protocol-inline nil, :name reagent.core/render-component, :variadic false, :file "out/reagent/core.cljs", :end-column 24, :method-params ([comp container] [comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container] [comp container callback])), :doc "Render a Reagent component into the DOM. The first argument may be either a\nvector (using Reagent's Hiccup syntax), or a React component. The second argument should be a DOM node.\n\nOptionally takes a callback that is called when the component is in place.\n\nReturns the mounted component instance.", :test true}, cursor {:protocol-inline nil, :name reagent.core/cursor, :variadic false, :file "out/reagent/core.cljs", :end-column 14, :method-params ([path] [path ra]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1} {:tag reagent.ratom/RCursor, :variadic false, :max-fixed-arity 2}), :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path] [path ra])), :doc "Provide a cursor into a Reagent atom.\n\nBehaves like a Reagent atom but focuses updates and derefs to\nthe specified path within the wrapped Reagent atom. e.g.,\n  (let [c (cursor [:nested :content] ra)]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )", :test true}, state {:protocol-inline nil, :name reagent.core/state, :variadic false, :file "out/reagent/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the state of a component, as set with replace-state or set-state.", :test true}, render-component-to-string {:protocol-inline nil, :name reagent.core/render-component-to-string, :variadic false, :file "out/reagent/core.cljs", :end-column 34, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Turns a component into an HTML string.", :test true}, dom-node {:protocol-inline nil, :name reagent.core/dom-node, :variadic false, :file "out/reagent/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the root DOM node of a mounted component.", :test true}, is-client {:file "out/reagent/core.cljs", :line 12, :column 1, :end-line 12, :end-column 16, :test true, :name reagent.core/is-client}, replace-state {:protocol-inline nil, :name reagent.core/replace-state, :variadic false, :file "out/reagent/core.cljs", :end-column 21, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Set state of a component.", :test true}, partial {:protocol-inline nil, :name reagent.core/partial, :variadic true, :file "out/reagent/core.cljs", :end-column 15, :method-params ([f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag reagent.impl.util/partial-ifn, :variadic true, :max-fixed-arity 1}), :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f & args])), :doc "Works just like clojure.core/partial, except that it is an IFn, and\nthe result can be compared with =", :test true}, set-state {:protocol-inline nil, :name reagent.core/set-state, :variadic false, :file "out/reagent/core.cljs", :end-column 17, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :doc "Merge component state with new-state.", :test true}, argv {:protocol-inline nil, :name reagent.core/argv, :variadic false, :file "out/reagent/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Returns the entire Hiccup form passed to the component.", :test true}, create-class {:protocol-inline nil, :name reagent.core/create-class, :variadic false, :file "out/reagent/core.cljs", :end-column 20, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "Create a component, React style. Should be called with a map,\nlooking like this:\n{:get-initial-state (fn [this])\n:component-will-receive-props (fn [this new-argv])\n:should-component-update (fn [this old-argv new-argv])\n:component-will-mount (fn [this])\n:component-did-mount (fn [this])\n:component-will-update (fn [this new-argv])\n:component-did-update (fn [this old-argv])\n:component-will-unmount (fn [this])\n:render (fn [this])}\n\nEverything is optional, except :render.\n", :test true}}, :name reagent.core, :doc nil, :excludes #{atom flush partial}, :use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, .! reagent.interop}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses nil, :requires {reagent.impl.util reagent.impl.util, comp reagent.impl.component, reagent.interop reagent.interop, reagent.ratom reagent.ratom, reagent.impl.template reagent.impl.template, reagent.impl.batching reagent.impl.batching, reagent.impl.component reagent.impl.component, util reagent.impl.util, tmpl reagent.impl.template, ratom reagent.ratom, batch reagent.impl.batching, reagent.debug reagent.debug}, :imports nil}