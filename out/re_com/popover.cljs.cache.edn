;; Analyzed by ClojureScript 0.0-2725
{:defs {popover-border {:protocol-inline nil, :name re-com.popover/popover-border, :variadic true, :file "out/re_com/popover.cljs", :end-column 22, :method-params ([p__6633]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 158, :end-line 158, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [children position width height popover-color arrow-length arrow-width padding margin-left margin-top tooltip-style? title], :or {arrow-length 11, arrow-width 22}, :as args}])), :doc "Renders an element or control along with a Bootstrap popover", :test true}, popover-title {:protocol-inline nil, :private true, :name re-com.popover/popover-title, :variadic true, :file "out/re_com/popover.cljs", :end-column 22, :method-params ([p__6653]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 238, :end-line 238, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [title showing? close-button? close-callback], :as args}])), :doc "Renders a title at the top of a popover with an optional close button on the far right", :test true}, popover-anchor-wrapper-args-desc {:file "out/re_com/popover.cljs", :line 335, :column 1, :end-line 335, :end-column 39, :test true, :name re-com.popover/popover-anchor-wrapper-args-desc}, backdrop {:protocol-inline nil, :private true, :name re-com.popover/backdrop, :variadic true, :file "out/re_com/popover.cljs", :end-column 17, :method-params ([p__6625]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 112, :end-line 112, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [opacity on-click], :as args}])), :doc "Renders a backdrop dive which fills the entire page and responds to clicks on it. Can also specify how tranparent it should be", :test true}, popover-arrow {:protocol-inline nil, :private true, :name re-com.popover/popover-arrow, :variadic false, :file "out/re_com/popover.cljs", :end-column 22, :method-params ([orientation pop-offset arrow-length arrow-width grey-arrow? no-border? popover-color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 7}), :line 67, :end-line 67, :max-fixed-arity 7, :fn-var true, :arglists (quote ([orientation pop-offset arrow-length arrow-width grey-arrow? no-border? popover-color])), :test true}, popover-tooltip-args-desc {:file "out/re_com/popover.cljs", :line 372, :column 1, :end-line 372, :end-column 32, :test true, :name re-com.popover/popover-tooltip-args-desc}, split-keyword {:protocol-inline nil, :private true, :name re-com.popover/split-keyword, :variadic false, :file "out/re_com/popover.cljs", :end-column 22, :method-params ([kw delimiter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kw delimiter])), :doc "I return the vector of the two keywords formed by splitting\n   another keyword 'kw' on an internal delimiter (usually '-').\n   (split-keyword  :above-left  \"-\")\n   =>  [:above :left]", :test true}, popover-border-args-desc {:file "out/re_com/popover.cljs", :line 144, :column 1, :end-line 144, :end-column 31, :test true, :name re-com.popover/popover-border-args-desc}, backdrop-args-desc {:file "out/re_com/popover.cljs", :line 108, :column 1, :end-line 108, :end-column 25, :test true, :name re-com.popover/backdrop-args-desc}, close-button {:protocol-inline nil, :private true, :name re-com.popover/close-button, :variadic false, :file "out/re_com/popover.cljs", :end-column 21, :method-params ([showing? close-callback style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 3}), :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([showing? close-callback style])), :doc "A button with a big X in it, placed to the right of the popup", :test true}, calc-popover-pos {:protocol-inline nil, :private true, :name re-com.popover/calc-popover-pos, :variadic false, :file "out/re_com/popover.cljs", :end-column 25, :method-params ([pop-orient p-width p-height pop-offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 4}), :line 44, :end-line 44, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pop-orient p-width p-height pop-offset])), :test true}, next-even-integer {:protocol-inline nil, :name re-com.popover/next-even-integer, :variadic false, :file "out/re_com/popover.cljs", :end-column 25, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :test true}, popover-content-wrapper {:protocol-inline nil, :name re-com.popover/popover-content-wrapper, :variadic true, :file "out/re_com/popover.cljs", :end-column 31, :method-params ([p__6658]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 276, :end-line 276, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [showing? position no-clip? width height backdrop-opacity on-cancel title close-button? body tooltip-style? popover-color arrow-length arrow-width padding style], :or {arrow-length 11, arrow-width 22}, :as args}])), :doc "Abstracts several components to handle the 90% of cases for general popovers and dialog boxes", :test true}, popover-content-wrapper-args-desc {:file "out/re_com/popover.cljs", :line 258, :column 1, :end-line 258, :end-column 40, :test true, :name re-com.popover/popover-content-wrapper-args-desc}, popover-tooltip {:protocol-inline nil, :name re-com.popover/popover-tooltip, :variadic true, :file "out/re_com/popover.cljs", :end-column 23, :method-params ([p__6683]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 383, :end-line 383, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [label showing? on-cancel close-button? status anchor position width style], :as args}])), :doc "Renders text as a tooltip in Bootstrap popover style", :test true}, calc-pop-offset {:protocol-inline nil, :name re-com.popover/calc-pop-offset, :variadic false, :file "out/re_com/popover.cljs", :end-column 23, :method-params ([arrow-pos p-width p-height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 135, :end-line 135, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arrow-pos p-width p-height])), :test true}, popover-title-args-desc {:file "out/re_com/popover.cljs", :line 232, :column 1, :end-line 232, :end-column 30, :test true, :name re-com.popover/popover-title-args-desc}, popover-anchor-wrapper {:protocol-inline nil, :name re-com.popover/popover-anchor-wrapper, :variadic true, :file "out/re_com/popover.cljs", :end-column 30, :method-params ([p__6670]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 342, :end-line 342, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [showing? position anchor popover style], :as args}])), :doc "Renders an element or control along with a Bootstrap popover", :test true}, point {:protocol-inline nil, :name re-com.popover/point, :variadic false, :file "out/re_com/popover.cljs", :end-column 13, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}}, :name re-com.popover, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {align-style re-com.box, sum-scroll-offsets re-com.util, html-attr? re-com.validate, h-box re-com.box, string-or-atom? re-com.validate, deref-or-value re-com.util, position? re-com.validate, popover-status-types-list re-com.validate, flex-flow-style re-com.box, popover-status-type? re-com.validate, get-element-by-id re-com.util, css-style? re-com.validate, position-options-list re-com.validate, px re-com.util, string-or-hiccup? re-com.validate, vector-of-maps? re-com.validate, v-box re-com.box, flex-child-style re-com.box, number-or-string? re-com.validate}, :requires {reagent reagent.core, reagent.core reagent.core, string clojure.string, clojure.string clojure.string, re-com.validate re-com.validate, re-com.box re-com.box, re-com.util re-com.util}, :imports nil}