;; Analyzed by ClojureScript 0.0-2725
{:defs {spacing-unbordered {:file "out/re_com/selection_list.cljs", :line 75, :column 1, :end-line 75, :end-column 33, :const true, :test true, :name re-com.selection-list/spacing-unbordered}, radio-clicked {:protocol-inline nil, :private true, :name re-com.selection-list/radio-clicked, :variadic false, :file "out/re_com/selection_list.cljs", :end-column 22, :method-params ([selections item required?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cljs.core/ISet}, :variadic false, :max-fixed-arity 3}), :line 41, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists (quote ([selections item required?])), :test true}, spacing-bordered {:file "out/re_com/selection_list.cljs", :line 67, :column 1, :end-line 67, :end-column 31, :const true, :test true, :name re-com.selection-list/spacing-bordered}, selection-list {:protocol-inline nil, :name re-com.selection-list/selection-list, :variadic true, :file "out/re_com/selection_list.cljs", :end-column 22, :method-params ([p__5979]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 133, :end-line 133, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:as args}])), :doc "Produce a list box with items arranged vertically", :test true}, as-checked {:protocol-inline nil, :private true, :name re-com.selection-list/as-checked, :variadic false, :file "out/re_com/selection_list.cljs", :end-column 19, :method-params ([item selections on-change disabled? label-fn required? as-exclusions?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 7}), :line 26, :end-line 26, :max-fixed-arity 7, :fn-var true, :arglists (quote ([item selections on-change disabled? label-fn required? as-exclusions?])), :test true}, list-style {:file "out/re_com/selection_list.cljs", :line 62, :column 1, :end-line 62, :end-column 25, :const true, :test true, :name re-com.selection-list/list-style}, check-clicked {:protocol-inline nil, :private true, :name re-com.selection-list/check-clicked, :variadic false, :file "out/re_com/selection_list.cljs", :end-column 22, :method-params ([selections item ticked? required?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj clj-nil}, :variadic false, :max-fixed-arity 4}), :line 18, :end-line 18, :max-fixed-arity 4, :fn-var true, :arglists (quote ([selections item ticked? required?])), :test true}, list-container {:protocol-inline nil, :private true, :name re-com.selection-list/list-container, :variadic false, :file "out/re_com/selection_list.cljs", :end-column 23, :method-params ([p__5976]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [choices model on-change multi-select? disabled? hide-border? label-fn required? as-exclusions? item-renderer], :as args}])), :test true}, configure {:protocol-inline nil, :private true, :name re-com.selection-list/configure, :variadic false, :file "out/re_com/selection_list.cljs", :end-column 18, :method-params ([attributes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attributes])), :doc "Augment passed attributes with defaults and deref any atoms", :test true}, as-radio {:protocol-inline nil, :private true, :name re-com.selection-list/as-radio, :variadic false, :file "out/re_com/selection_list.cljs", :end-column 17, :method-params ([item selections on-change disabled? label-fn required? as-exclusions?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 7}), :line 47, :end-line 47, :max-fixed-arity 7, :fn-var true, :arglists (quote ([item selections on-change disabled? label-fn required? as-exclusions?])), :test true}, selection-list-args-desc {:file "out/re_com/selection_list.cljs", :line 84, :column 1, :end-line 84, :end-column 31, :test true, :name re-com.selection-list/selection-list-args-desc}, label-style {:protocol-inline nil, :name re-com.selection-list/label-style, :variadic false, :file "out/re_com/selection_list.cljs", :end-column 19, :method-params ([selected? as-exclusions?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any cljs.core/IMap clj-nil}, :variadic false, :max-fixed-arity 2}), :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selected? as-exclusions?])), :test true}}, :name re-com.selection-list, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {h-box re-com.box, border re-com.box, string-or-atom? re-com.validate, deref-or-value re-com.util, radio-button re-com.misc, checkbox re-com.misc, box re-com.box, vector-of-maps? re-com.validate, v-box re-com.box, label re-com.text, set-or-atom? re-com.validate, fmap re-com.util}, :requires {re-com.util re-com.util, re-com.validate re-com.validate, re-com.box re-com.box, re-com.misc re-com.misc, re-com.text re-com.text}, :imports nil}