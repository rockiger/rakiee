;; Analyzed by ClojureScript 0.0-2725
{:defs {row-button {:protocol-inline nil, :name re-com.buttons/row-button, :variadic false, :file "out/re_com/buttons.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 230, :end-line 230, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "a circular button containing a material design icon", :test true}, info-button-args-desc {:file "out/re_com/buttons.cljs", :line 178, :column 1, :end-line 178, :end-column 28, :test true, :name re-com.buttons/info-button-args-desc}, hyperlink-args-desc {:file "out/re_com/buttons.cljs", :line 268, :column 1, :end-line 268, :end-column 26, :test true, :name re-com.buttons/hyperlink-args-desc}, md-circle-icon-button-args-desc {:file "out/re_com/buttons.cljs", :line 65, :column 1, :end-line 65, :end-column 38, :test true, :name re-com.buttons/md-circle-icon-button-args-desc}, button {:protocol-inline nil, :name re-com.buttons/button, :variadic false, :file "out/re_com/buttons.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the markup for a basic button", :test true}, button-args-desc {:file "out/re_com/buttons.cljs", :line 14, :column 1, :end-line 14, :end-column 23, :test true, :name re-com.buttons/button-args-desc}, hyperlink-href-args-desc {:file "out/re_com/buttons.cljs", :line 320, :column 1, :end-line 320, :end-column 31, :test true, :name re-com.buttons/hyperlink-href-args-desc}, md-icon-button-args-desc {:file "out/re_com/buttons.cljs", :line 121, :column 1, :end-line 121, :end-column 31, :test true, :name re-com.buttons/md-icon-button-args-desc}, info-button {:protocol-inline nil, :name re-com.buttons/info-button, :variadic false, :file "out/re_com/buttons.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 186, :end-line 186, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "A tiny light grey button, with an 'i' in it. Meant to be unobrusive.\n  When pressed, displays a popup assumidly containing helpful information.\n  Primarily designed to be nestled against the label of an input field, explaining the purpose of that field.\n  Create a very small \"i\" icon via SVG", :test true}, row-button-args-desc {:file "out/re_com/buttons.cljs", :line 219, :column 1, :end-line 219, :end-column 27, :test true, :name re-com.buttons/row-button-args-desc}, hyperlink-href {:protocol-inline nil, :name re-com.buttons/hyperlink-href, :variadic false, :file "out/re_com/buttons.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 330, :end-line 330, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Renders an underlined text hyperlink component.\n   This is very similar to the button component above but styled to looks like a hyperlink.\n   Useful for providing button functionality for less important functions, e.g. Cancel", :test true}, md-icon-button {:protocol-inline nil, :name re-com.buttons/md-icon-button, :variadic false, :file "out/re_com/buttons.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 133, :end-line 133, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "a square button containing a material design icon", :test true}, md-circle-icon-button {:protocol-inline nil, :name re-com.buttons/md-circle-icon-button, :variadic false, :file "out/re_com/buttons.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "a circular button containing a material design icon", :test true}, hyperlink {:protocol-inline nil, :name re-com.buttons/hyperlink, :variadic false, :file "out/re_com/buttons.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 278, :end-line 278, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Renders an underlined text hyperlink component.\n   This is very similar to the button component above but styled to looks like a hyperlink.\n   Useful for providing button functionality for less important functions, e.g. Cancel", :test true}}, :name re-com.buttons, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {html-attr? re-com.validate, h-box re-com.box, string-or-atom? re-com.validate, deref-or-value re-com.util, position? re-com.validate, css-style? re-com.validate, position-options-list re-com.validate, box re-com.box, px re-com.util, string-or-hiccup? re-com.validate, v-box re-com.box, flex-child-style re-com.box, popover-tooltip re-com.popover, line re-com.box, button-sizes-list re-com.validate, gap re-com.box, button-size? re-com.validate}, :requires {reagent reagent.core, reagent.core reagent.core, re-com.box re-com.box, re-com.popover re-com.popover, re-com.validate re-com.validate, re-com.util re-com.util}, :imports nil}