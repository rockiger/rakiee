;; Analyzed by ClojureScript 0.0-2725
{:defs {sum-scroll-offsets {:protocol-inline nil, :name re-com.util/sum-scroll-offsets, :variadic false, :file "out/re_com/util.cljs", :end-column 26, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Given a DOM node, I traverse through all ascendant nodes (until I reach body), summing any scrollLeft and scrollTop values\n   and return these sums in a map", :test true}, position-for-id {:protocol-inline nil, :name re-com.util/position-for-id, :variadic true, :file "out/re_com/util.cljs", :end-column 23, :method-params ([id v p__5854]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 2}), :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v'. Returns the position of the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :test true}, enumerate {:protocol-inline nil, :name re-com.util/enumerate, :variadic false, :file "out/re_com/util.cljs", :end-column 17, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "(for [[index item first? last?] (enumerate coll)] ...)  ", :test true}, remove-id-item {:protocol-inline nil, :name re-com.util/remove-id-item, :variadic true, :file "out/re_com/util.cljs", :end-column 22, :method-params ([id v p__5866]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic true, :max-fixed-arity 2}), :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v', each of which has an id-fn (default :id) key.\n  Return v where item matching 'id' is excluded", :test true}, remove-nth {:protocol-inline nil, :name re-com.util/remove-nth, :variadic false, :file "out/re_com/util.cljs", :end-column 18, :method-params ([v n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj any}, :variadic false, :max-fixed-arity 2}), :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v n])), :doc "Removes the item at position n from a vector v, returning a shrunk vector", :test true}, deref-or-value {:protocol-inline nil, :name re-com.util/deref-or-value, :variadic false, :file "out/re_com/util.cljs", :end-column 22, :method-params ([val-or-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val-or-atom])), :test true}, insert-nth {:protocol-inline nil, :name re-com.util/insert-nth, :variadic false, :file "out/re_com/util.cljs", :end-column 18, :method-params ([vect index item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 53, :end-line 53, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vect index item])), :test true}, pad-zero {:protocol-inline nil, :name re-com.util/pad-zero, :variadic false, :file "out/re_com/util.cljs", :end-column 16, :method-params ([s len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s len])), :doc "Left pad a string 's' with '0', until 's' has length 'len'. Return 's' unchanged, if it is already len or greater", :test true}, get-element-by-id {:protocol-inline nil, :name re-com.util/get-element-by-id, :variadic false, :file "out/re_com/util.cljs", :end-column 25, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :test true}, px {:protocol-inline nil, :name re-com.util/px, :variadic true, :file "out/re_com/util.cljs", :end-column 10, :method-params ([val negative]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val & negative])), :doc "takes a number (and optional :negative keyword to indicate a negative value) and returns that number as a string with 'px' at the end", :test true}, item-for-id {:protocol-inline nil, :name re-com.util/item-for-id, :variadic true, :file "out/re_com/util.cljs", :end-column 19, :method-params ([id v p__5860]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 2}), :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v'. Returns the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :test true}, fmap {:protocol-inline nil, :name re-com.util/fmap, :variadic false, :file "out/re_com/util.cljs", :end-column 12, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 2}), :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m])), :doc "Takes a function 'f' amd a map 'm'.  Applies 'f' to each value in 'm' and returns.\n   (fmap  inc  {:a 4  :b 2})   =>   {:a 5  :b 3}", :test true}, pad-zero-number {:protocol-inline nil, :name re-com.util/pad-zero-number, :variadic false, :file "out/re_com/util.cljs", :end-column 23, :method-params ([num len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num len])), :doc "return 'num' as a string of 'len' characters, left padding with '0' as necessary", :test true}}, :name re-com.util, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {superset? clojure.set}, :requires {clojure.set clojure.set}, :imports nil}