;; Analyzed by ClojureScript 0.0-2725
{:defs {validate-fns-pass? {:protocol-inline nil, :name re-com.validate/validate-fns-pass?, :variadic false, :file "out/re_com/validate.cljs", :end-column 26, :method-params ([args-with-validators passed-args component-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 3}), :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([args-with-validators passed-args component-name])), :doc "Gathers together a list of args that have a validator and...\n   returns true if all argument values are valid OR are just warnings (log warning to the console).\n   Otherwise log an error to the console and return false.\n   Validation functions can return:\n         - true:   validation success\n         - false:  validation failed - use standard error message\n         - map:    validation failed - includes two keys:\n                                         :status  - :error:   log to console as error\n                                                    :warning: log to console as warning\n                                         :message - use this string in the message of the warning/error", :test true}, html-attr? {:protocol-inline nil, :name re-com.validate/html-attr?, :variadic false, :file "out/re_com/validate.cljs", :end-column 18, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean cljs.core/IMap}, :variadic false, :max-fixed-arity 1}), :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a valid HTML, SVG or event attribute.\n   Otherwise returns a warning map.\n   Notes:\n    - Prevents :class and :style attributes", :test true}, alert-type? {:protocol-inline nil, :name re-com.validate/alert-type?, :variadic false, :file "out/re_com/validate.cljs", :end-column 19, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, input-status-types {:file "out/re_com/validate.cljs", :line 121, :column 1, :end-line 121, :end-column 25, :test true, :name re-com.validate/input-status-types}, throbber-sizes {:file "out/re_com/validate.cljs", :line 120, :column 1, :end-line 120, :end-column 21, :test true, :name re-com.validate/throbber-sizes}, scroll-style? {:protocol-inline nil, :name re-com.validate/scroll-style?, :variadic false, :file "out/re_com/validate.cljs", :end-column 21, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, string-or-atom? {:protocol-inline nil, :name re-com.validate/string-or-atom?, :variadic false, :file "out/re_com/validate.cljs", :end-column 23, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 303, :end-line 303, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a string (or a string within an atom), otherwise false/error", :test true}, justify-options {:file "out/re_com/validate.cljs", :line 115, :column 1, :end-line 115, :end-column 22, :test true, :name re-com.validate/justify-options}, extract-arg-data {:protocol-inline nil, :name re-com.validate/extract-arg-data, :variadic false, :file "out/re_com/validate.cljs", :end-column 24, :method-params ([args-desc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args-desc])), :doc "Package up all the relevant data for validation purposes from the xxx-args-desc map into a new map", :test true}, align-style? {:protocol-inline nil, :name re-com.validate/align-style?, :variadic false, :file "out/re_com/validate.cljs", :end-column 20, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, throbber-sizes-list {:file "out/re_com/validate.cljs", :line 161, :column 1, :end-line 161, :end-column 26, :test true, :name re-com.validate/throbber-sizes-list}, position? {:protocol-inline nil, :name re-com.validate/position?, :variadic false, :file "out/re_com/validate.cljs", :end-column 17, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, alert-types-list {:file "out/re_com/validate.cljs", :line 159, :column 1, :end-line 159, :end-column 23, :test true, :name re-com.validate/alert-types-list}, throbber-size? {:protocol-inline nil, :name re-com.validate/throbber-size?, :variadic false, :file "out/re_com/validate.cljs", :end-column 22, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, make-code-list {:protocol-inline nil, :name re-com.validate/make-code-list, :variadic false, :file "out/re_com/validate.cljs", :end-column 22, :method-params ([codes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 1}), :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([codes])), :doc "Given a vector or list of codes, create a [:span] hiccup vector containing a comma separated list of the codes", :test true}, popover-status-types-list {:file "out/re_com/validate.cljs", :line 163, :column 1, :end-line 163, :end-column 32, :test true, :name re-com.validate/popover-status-types-list}, log-warning {:protocol-inline nil, :name re-com.validate/log-warning, :variadic true, :file "out/re_com/validate.cljs", :end-column 19, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic true, :max-fixed-arity 0}), :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& args])), :doc "Sends a message to the DeV Tools console as an warning. Returns true to indicate 'not and error' condition", :test true}, scroll-options {:file "out/re_com/validate.cljs", :line 117, :column 1, :end-line 117, :end-column 21, :test true, :name re-com.validate/scroll-options}, justify-style? {:protocol-inline nil, :name re-com.validate/justify-style?, :variadic false, :file "out/re_com/validate.cljs", :end-column 22, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, scroll-options-list {:file "out/re_com/validate.cljs", :line 158, :column 1, :end-line 158, :end-column 26, :test true, :name re-com.validate/scroll-options-list}, title-level-type? {:protocol-inline nil, :name re-com.validate/title-level-type?, :variadic false, :file "out/re_com/validate.cljs", :end-column 25, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, popover-status-type? {:protocol-inline nil, :name re-com.validate/popover-status-type?, :variadic false, :file "out/re_com/validate.cljs", :end-column 28, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, css-styles {:file "out/re_com/validate.cljs", :line 195, :column 1, :end-line 195, :end-column 17, :test true, :name re-com.validate/css-styles}, title-levels {:file "out/re_com/validate.cljs", :line 123, :column 1, :end-line 123, :end-column 19, :test true, :name re-com.validate/title-levels}, regex? {:protocol-inline nil, :name re-com.validate/regex?, :variadic false, :file "out/re_com/validate.cljs", :end-column 14, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 291, :end-line 291, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a valid regular expression, otherwise false/error", :test true}, css-style? {:protocol-inline nil, :name re-com.validate/css-style?, :variadic false, :file "out/re_com/validate.cljs", :end-column 18, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean cljs.core/IMap}, :variadic false, :max-fixed-arity 1}), :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a valid CSS style.\n   Otherwise returns a warning map", :test true}, html-attrs {:file "out/re_com/validate.cljs", :line 175, :column 1, :end-line 175, :end-column 17, :test true, :name re-com.validate/html-attrs}, position-options-list {:file "out/re_com/validate.cljs", :line 165, :column 1, :end-line 165, :end-column 28, :test true, :name re-com.validate/position-options-list}, validate-arg-against-set {:protocol-inline nil, :name re-com.validate/validate-arg-against-set, :variadic false, :file "out/re_com/validate.cljs", :end-column 32, :method-params ([arg arg-name valid-set]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 3}), :line 129, :end-line 129, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arg arg-name valid-set])), :doc "Validates the passed argument against the expected set", :test true}, position-options {:file "out/re_com/validate.cljs", :line 124, :column 1, :end-line 124, :end-column 23, :test true, :name re-com.validate/position-options}, justify-options-list {:file "out/re_com/validate.cljs", :line 156, :column 1, :end-line 156, :end-column 27, :test true, :name re-com.validate/justify-options-list}, required-args-passed? {:protocol-inline nil, :name re-com.validate/required-args-passed?, :variadic false, :file "out/re_com/validate.cljs", :end-column 29, :method-params ([required-args passed-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([required-args passed-args])), :doc "returns true if all the required args are supplied. Otherwise log the error and return false", :test true}, popover-status-types {:file "out/re_com/validate.cljs", :line 122, :column 1, :end-line 122, :end-column 27, :test true, :name re-com.validate/popover-status-types}, alert-types {:file "out/re_com/validate.cljs", :line 118, :column 1, :end-line 118, :end-column 18, :test true, :name re-com.validate/alert-types}, string-or-hiccup? {:protocol-inline nil, :name re-com.validate/string-or-hiccup?, :variadic false, :file "out/re_com/validate.cljs", :end-column 25, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is either valid hiccup or a string, otherwise false/error", :test true}, log-error {:protocol-inline nil, :name re-com.validate/log-error, :variadic true, :file "out/re_com/validate.cljs", :end-column 17, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic true, :max-fixed-arity 0}), :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& args])), :doc "Sends a message to the DeV Tools console as an error. Returns false to indicate 'error' condition", :test true}, vector-of-maps? {:protocol-inline nil, :name re-com.validate/vector-of-maps?, :variadic false, :file "out/re_com/validate.cljs", :end-column 23, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a vector of maps (either directly or contained in an atom), otherwise false/error\n   Notes:\n    - actually it also accepts a list of maps (should we rename this? Potential long/ugly names: sequential-of-maps?, vector-or-list-of-maps?)\n    - vector/list can be empty\n    - only checks the first element in the vector/list", :test true}, hash-map-with-name-keys {:protocol-inline nil, :name re-com.validate/hash-map-with-name-keys, :variadic false, :file "out/re_com/validate.cljs", :end-column 31, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, arg-names-valid? {:protocol-inline nil, :name re-com.validate/arg-names-valid?, :variadic false, :file "out/re_com/validate.cljs", :end-column 24, :method-params ([defined-args passed-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([defined-args passed-args])), :doc "returns true if every passed-args is value. Otherwise log the problem and return false", :test true}, input-status-type? {:protocol-inline nil, :name re-com.validate/input-status-type?, :variadic false, :file "out/re_com/validate.cljs", :end-column 26, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, validate-args {:protocol-inline nil, :name re-com.validate/validate-args, :variadic true, :file "out/re_com/validate.cljs", :end-column 21, :method-params ([arg-defs passed-args component-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic true, :max-fixed-arity 2}), :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg-defs passed-args & component-name])), :doc "Calls three validation tests:\n    - Are arg names valid?\n    - Have all required args been passed?\n    - Specific valiadation function calls to check arg values if specified\n   If they all pass, returns true.\n   Normally used for a call to the {:pre...} at the beginning of a function", :test true}, number-or-string? {:protocol-inline nil, :name re-com.validate/number-or-string?, :variadic false, :file "out/re_com/validate.cljs", :end-column 25, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a number or a string, otherwise false/error", :test true}, align-options {:file "out/re_com/validate.cljs", :line 116, :column 1, :end-line 116, :end-column 20, :test true, :name re-com.validate/align-options}, goog-date? {:protocol-inline nil, :name re-com.validate/goog-date?, :variadic false, :file "out/re_com/validate.cljs", :end-column 18, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a valid goog.date.UtcDateTime, otherwise false/error", :test true}, button-sizes-list {:file "out/re_com/validate.cljs", :line 160, :column 1, :end-line 160, :end-column 24, :test true, :name re-com.validate/button-sizes-list}, input-status-types-list {:file "out/re_com/validate.cljs", :line 162, :column 1, :end-line 162, :end-column 30, :test true, :name re-com.validate/input-status-types-list}, set-or-atom? {:protocol-inline nil, :name re-com.validate/set-or-atom?, :variadic false, :file "out/re_com/validate.cljs", :end-column 20, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :doc "Returns true if the passed argument is a set (or a set within an atom), otherwise false/error", :test true}, button-sizes {:file "out/re_com/validate.cljs", :line 119, :column 1, :end-line 119, :end-column 19, :test true, :name re-com.validate/button-sizes}, title-levels-list {:file "out/re_com/validate.cljs", :line 164, :column 1, :end-line 164, :end-column 24, :test true, :name re-com.validate/title-levels-list}, left-string {:protocol-inline nil, :name re-com.validate/left-string, :variadic false, :file "out/re_com/validate.cljs", :end-column 19, :method-params ([obj max-len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj max-len])), :doc "Converts obj to a string and truncates it to max-len chars if necessary.\n   When truncation is necessary, adds an elipsis to the end", :test true}, button-size? {:protocol-inline nil, :name re-com.validate/button-size?, :variadic false, :file "out/re_com/validate.cljs", :end-column 20, :method-params ([arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean}, :variadic false, :max-fixed-arity 1}), :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arg])), :test true}, align-options-list {:file "out/re_com/validate.cljs", :line 157, :column 1, :end-line 157, :end-column 25, :test true, :name re-com.validate/align-options-list}}, :name re-com.validate, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {valid-tag? reagent.impl.template, deref-or-value re-com.util, superset? clojure.set}, :requires {gstring goog.string, goog.string goog.string, reagent.impl.template reagent.impl.template, re-com.util re-com.util, clojure.set clojure.set}, :imports nil}