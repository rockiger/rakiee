;; Analyzed by ClojureScript 0.0-2725
{:defs {p {:protocol-inline nil, :name re-com.text/p, :variadic true, :file "out/re_com/text.cljs", :end-column 9, :method-params ([children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 76, :end-line 76, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& children])), :doc "acts like [:p ]\n   Designed for paragraphs of body text.\n   First child can be a map of styles / attributes\n   Sets appropriate font-size and line length.", :test true}, title {:protocol-inline nil, :name re-com.text/title, :variadic true, :file "out/re_com/text.cljs", :end-column 13, :method-params ([p__6587]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 54, :end-line 54, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [label level underline? margin-top margin-bottom class style attr], :or {margin-top "0.6em", margin-bottom "0.3em"}, :as args}])), :doc "A title with four preset levels", :test true}, title-args-desc {:file "out/re_com/text.cljs", :line 44, :column 1, :end-line 44, :end-column 22, :test true, :name re-com.text/title-args-desc}, label {:protocol-inline nil, :name re-com.text/label, :variadic true, :file "out/re_com/text.cljs", :end-column 13, :method-params ([p__6582]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [label on-click width class style attr], :as args}])), :doc "Returns markup for a basic label", :test true}, label-args-desc {:file "out/re_com/text.cljs", :line 12, :column 3, :end-line 12, :end-column 24, :test true, :name re-com.text/label-args-desc}}, :name re-com.text, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {html-attr? re-com.validate, title-level-type? re-com.validate, css-style? re-com.validate, box re-com.box, string-or-hiccup? re-com.validate, v-box re-com.box, flex-child-style re-com.box, line re-com.box, title-levels-list re-com.validate}, :requires {re-com.validate re-com.validate, re-com.box re-com.box}, :imports nil}