;; Analyzed by ClojureScript 0.0-2725
{:defs {input-textarea {:protocol-inline nil, :name re-com.misc/input-textarea, :variadic true, :file "out/re_com/misc.cljs", :end-column 22, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 146, :end-line 146, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& args])), :test true}, slider {:protocol-inline nil, :name re-com.misc/slider, :variadic false, :file "out/re_com/misc.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 262, :end-line 262, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns markup for an HTML5 slider input", :test true}, progress-bar-args-desc {:file "out/re_com/misc.cljs", :line 302, :column 1, :end-line 302, :end-column 29, :test true, :name re-com.misc/progress-bar-args-desc}, progress-bar {:protocol-inline nil, :name re-com.misc/progress-bar, :variadic true, :file "out/re_com/misc.cljs", :end-column 20, :method-params ([p__5931]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 310, :end-line 310, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model width striped? class style attr], :or {width "100%"}, :as args}])), :doc "Render a bootstrap styled progress bar", :test true}, input-text {:protocol-inline nil, :name re-com.misc/input-text, :variadic true, :file "out/re_com/misc.cljs", :end-column 18, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 141, :end-line 141, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& args])), :test true}, radio-button {:protocol-inline nil, :name re-com.misc/radio-button, :variadic true, :file "out/re_com/misc.cljs", :end-column 20, :method-params ([p__5919]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 212, :end-line 212, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model on-change value label disabled? style label-class label-style], :as args}])), :doc "I return the markup for a radio button, with an optional RHS label", :test true}, checkbox {:protocol-inline nil, :name re-com.misc/checkbox, :variadic true, :file "out/re_com/misc.cljs", :end-column 16, :method-params ([p__5914]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 165, :end-line 165, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model on-change label disabled? style label-class label-style], :as args}])), :doc "I return the markup for a checkbox, with an optional RHS label", :test true}, checkbox-args-desc {:file "out/re_com/misc.cljs", :line 155, :column 1, :end-line 155, :end-column 25, :test true, :name re-com.misc/checkbox-args-desc}, throbber-args-desc {:file "out/re_com/misc.cljs", :line 338, :column 1, :end-line 338, :end-column 25, :test true, :name re-com.misc/throbber-args-desc}, radio-button-args-desc {:file "out/re_com/misc.cljs", :line 202, :column 1, :end-line 202, :end-column 29, :test true, :name re-com.misc/radio-button-args-desc}, input-text-base {:protocol-inline nil, :private true, :name re-com.misc/input-text-base, :variadic true, :file "out/re_com/misc.cljs", :end-column 24, :method-params ([p__5890]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model input-type], :as args}])), :doc "Returns markup for a basic text input label", :test true}, slider-args-desc {:file "out/re_com/misc.cljs", :line 250, :column 1, :end-line 250, :end-column 23, :test true, :name re-com.misc/slider-args-desc}, input-text-args-desc {:file "out/re_com/misc.cljs", :line 16, :column 1, :end-line 16, :end-column 27, :test true, :name re-com.misc/input-text-args-desc}, throbber {:protocol-inline nil, :name re-com.misc/throbber, :variadic true, :file "out/re_com/misc.cljs", :end-column 16, :method-params ([p__5936]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 345, :end-line 345, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [size color class style attr], :as args}])), :doc "Render an animated throbber using CSS", :test true}}, :name re-com.misc, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {align-style re-com.box, html-attr? re-com.validate, h-box re-com.box, string-or-atom? re-com.validate, deref-or-value re-com.util, throbber-sizes-list re-com.validate, throbber-size? re-com.validate, regex? re-com.validate, css-style? re-com.validate, box re-com.box, px re-com.util, string-or-hiccup? re-com.validate, v-box re-com.box, flex-child-style re-com.box, input-status-type? re-com.validate, popover-tooltip re-com.popover, line re-com.box, number-or-string? re-com.validate, input-status-types-list re-com.validate, gap re-com.box}, :requires {reagent reagent.core, reagent.core reagent.core, re-com.validate re-com.validate, re-com.box re-com.box, re-com.popover re-com.popover, re-com.util re-com.util}, :imports nil}