;; Analyzed by ClojureScript 0.0-2725
{:defs {alert-list {:protocol-inline nil, :name re-com.alert/alert-list, :variadic true, :file "out/re_com/alert.cljs", :end-column 18, :method-params ([p__6438]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [alerts on-close max-height padding border-style class style attr], :or {padding "4px"}, :as args}])), :doc "Displays a list of alert-box components in a v-box. Sample alerts object:\n     [{:id 2\n       :alert-type :warning\n       :heading \"Heading\"\n       :body \"Body\"\n       :padding \"8px\"\n       :closeable? true}\n      {:id 1\n       :alert-type :info\n       :heading \"Heading\"\n       :body \"Body\"}]", :test true}, alert-list-args-desc {:file "out/re_com/alert.cljs", :line 67, :column 1, :end-line 67, :end-column 27, :test true, :name re-com.alert/alert-list-args-desc}, alert-box {:protocol-inline nil, :name re-com.alert/alert-box, :variadic true, :file "out/re_com/alert.cljs", :end-column 17, :method-params ([p__6433]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [id alert-type heading body padding closeable? on-close class style attr], :or {alert-type :info}, :as args}])), :doc "Displays one alert box. A close button allows the message to be removed", :test true}, alert-box-args-desc {:file "out/re_com/alert.cljs", :line 13, :column 1, :end-line 13, :end-column 26, :test true, :name re-com.alert/alert-box-args-desc}}, :name re-com.alert, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {html-attr? re-com.validate, alert-type? re-com.validate, h-box re-com.box, border re-com.box, deref-or-value re-com.util, alert-types-list re-com.validate, scroller re-com.box, button re-com.buttons, css-style? re-com.validate, box re-com.box, string-or-hiccup? re-com.validate, vector-of-maps? re-com.validate, v-box re-com.box, flex-child-style re-com.box}, :requires {re-com.validate re-com.validate, re-com.box re-com.box, re-com.buttons re-com.buttons, re-com.util re-com.util}, :imports nil}