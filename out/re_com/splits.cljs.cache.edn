;; Analyzed by ClojureScript 0.0-2725
{:defs {v-split {:protocol-inline nil, :name re-com.splits/v-split, :variadic true, :file "out/re_com/splits.cljs", :end-column 15, :method-params ([p__5883]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 136, :end-line 136, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}])), :doc "Returns markup for a vertical layout component", :test true}, h-split {:protocol-inline nil, :name re-com.splits/h-split, :variadic true, :file "out/re_com/splits.cljs", :end-column 15, :method-params ([p__5877]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}])), :doc "Returns markup for a horizontal layout component", :test true}, hv-split-args-desc {:file "out/re_com/splits.cljs", :line 39, :column 1, :end-line 39, :end-column 25, :test true, :name re-com.splits/hv-split-args-desc}, drag-handle {:protocol-inline nil, :name re-com.splits/drag-handle, :variadic false, :file "out/re_com/splits.cljs", :end-column 19, :method-params ([orientation over?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([orientation over?])), :doc "Return a drag handle to go into a vertical or horizontal splitter bar:\n    orientation: Can be :horizonal or :vertical\n    over?:       When true, the mouse is assumed to be over the splitter so show a bolder color", :test true}}, :name re-com.splits, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {sum-scroll-offsets re-com.util, html-attr? re-com.validate, flex-flow-style re-com.box, get-element-by-id re-com.util, css-style? re-com.validate, string-or-hiccup? re-com.validate, flex-child-style re-com.box, number-or-string? re-com.validate}, :requires {reagent reagent.core, reagent.core reagent.core, re-com.validate re-com.validate, re-com.box re-com.box, re-com.util re-com.util}, :imports nil}