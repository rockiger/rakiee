;; Analyzed by ClojureScript 0.0-2725
{:defs {text->time {:protocol-inline nil, :private true, :name re-com.input-time/text->time, :variadic false, :file "out/re_com/input_time.cljs", :end-column 19, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "return as a time int, the contents of 'text'", :test true}, on-defocus {:protocol-inline nil, :private true, :name re-com.input-time/on-defocus, :variadic false, :file "out/re_com/input_time.cljs", :end-column 19, :method-params ([text-model min max callback previous-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 5}), :line 116, :end-line 116, :max-fixed-arity 5, :fn-var true, :arglists (quote ([text-model min max callback previous-val])), :doc "Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary", :test true}, valid-time? {:protocol-inline nil, :private true, :name re-com.input-time/valid-time?, :variadic false, :file "out/re_com/input_time.cljs", :end-column 20, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time])), :test true}, input-time-args-desc {:file "out/re_com/input_time.cljs", :line 127, :column 1, :end-line 127, :end-column 27, :test true, :name re-com.input-time/input-time-args-desc}, time->hrs {:protocol-inline nil, :private true, :name re-com.input-time/time->hrs, :variadic false, :file "out/re_com/input_time.cljs", :end-column 18, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time])), :test true}, time->mins {:protocol-inline nil, :private true, :name re-com.input-time/time->mins, :variadic false, :file "out/re_com/input_time.cljs", :end-column 19, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time])), :test true}, triple->time {:protocol-inline nil, :private true, :name re-com.input-time/triple->time, :variadic false, :file "out/re_com/input_time.cljs", :end-column 21, :method-params ([p__6063]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[hr _ mi]])), :doc "Return a time integer from a triple int vector of form  [H  _  M]", :test true}, valid-text? {:protocol-inline nil, :private true, :name re-com.input-time/valid-text?, :variadic false, :file "out/re_com/input_time.cljs", :end-column 20, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression", :test true}, time->text {:protocol-inline nil, :private true, :name re-com.input-time/time->text, :variadic false, :file "out/re_com/input_time.cljs", :end-column 19, :method-params ([time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([time])), :doc "return a string of format HH:MM for 'time'", :test true}, triple-seeking-re {:file "out/re_com/input_time.cljs", :line 39, :column 1, :end-line 40, :end-column 21, :private true, :test true, :name re-com.input-time/triple-seeking-re}, on-new-keypress {:protocol-inline nil, :private true, :name re-com.input-time/on-new-keypress, :variadic false, :file "out/re_com/input_time.cljs", :end-column 24, :method-params ([event text-model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event text-model])), :doc "Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid", :test true}, to-int {:protocol-inline nil, :private true, :name re-com.input-time/to-int, :variadic false, :file "out/re_com/input_time.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any number}, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse the string 's' to a valid int. On parse failure, return 0", :test true}, extract-triple-from-text {:protocol-inline nil, :private true, :name re-com.input-time/extract-triple-from-text, :variadic false, :file "out/re_com/input_time.cljs", :end-column 33, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :test true}, validate-arg-times {:protocol-inline nil, :private true, :name re-com.input-time/validate-arg-times, :variadic false, :file "out/re_com/input_time.cljs", :end-column 27, :method-params ([model minimum maximum]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 3}), :line 82, :end-line 82, :max-fixed-arity 3, :fn-var true, :arglists (quote ([model minimum maximum])), :test true}, force-valid-time {:protocol-inline nil, :private true, :name re-com.input-time/force-valid-time, :variadic false, :file "out/re_com/input_time.cljs", :end-column 25, :method-params ([time min max previous]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 4}), :line 90, :end-line 90, :max-fixed-arity 4, :fn-var true, :arglists (quote ([time min max previous])), :doc "Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid", :test true}, input-time {:protocol-inline nil, :name re-com.input-time/input-time, :variadic true, :file "out/re_com/input_time.cljs", :end-column 18, :method-params ([p__6066]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 141, :end-line 141, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model minimum maximum on-change class style attr], :as args, :or {minimum 0, maximum 2359}}])), :doc "I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above", :test true}, lose-focus-if-enter {:protocol-inline nil, :private true, :name re-com.input-time/lose-focus-if-enter, :variadic false, :file "out/re_com/input_time.cljs", :end-column 28, :method-params ([ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean clj-nil}, :variadic false, :max-fixed-arity 1}), :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ev])), :doc "When Enter is pressed, force the component to lose focus", :test true}}, :name re-com.input-time, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {html-attr? re-com.validate, h-box re-com.box, deref-or-value re-com.util, css-style? re-com.validate, label re-com.text, number-or-string? re-com.validate, pad-zero-number re-com.util, gap re-com.box}, :requires {re-com.util re-com.util, re-com.box re-com.box, re-com.text re-com.text, re-com.validate re-com.validate, reagent.core reagent.core, reagent reagent.core}, :imports nil}