;; Analyzed by ClojureScript 0.0-2725
{:defs {choices-with-group-headings {:protocol-inline nil, :private true, :name re-com.dropdown/choices-with-group-headings, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 36, :method-params ([opts group-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts group-fn])), :doc "If necessary, inserts group headings entries into the choices", :test true}, filter-text-box {:doc "Render a filter text box", :file "out/re_com/dropdown.cljs", :line 150, :column 1, :end-line 150, :end-column 32, :private true, :test true, :name re-com.dropdown/filter-text-box}, filter-choices {:protocol-inline nil, :private true, :name re-com.dropdown/filter-choices, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 23, :method-params ([choices group-fn label-fn filter-text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 4}), :line 36, :end-line 36, :max-fixed-arity 4, :fn-var true, :arglists (quote ([choices group-fn label-fn filter-text])), :doc "Filter a list of choices based on a filter string using plain string searches (case insensitive). Less powerful\n   than regex's but no confusion with reserved characters", :test true}, move-to-new-choice {:protocol-inline nil, :private true, :name re-com.dropdown/move-to-new-choice, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 27, :method-params ([choices id-fn id offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 4}), :line 12, :end-line 12, :max-fixed-arity 4, :fn-var true, :arglists (quote ([choices id-fn id offset])), :doc "In a vector of maps (where each map has an :id), return the id of the choice offset posititions away\n   from id (usually +1 or -1 to go to next/previous). Also accepts :start and :end", :test true}, show-selected-item {:protocol-inline nil, :name re-com.dropdown/show-selected-item, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 26, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :test true}, filter-text-box-base {:protocol-inline nil, :private true, :name re-com.dropdown/filter-text-box-base, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 131, :end-line 131, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Base function (before lifecycle metadata) to render a filter text box", :test true}, make-choice-item {:protocol-inline nil, :name re-com.dropdown/make-choice-item, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 24, :method-params ([id-fn label-fn callback internal-model opt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 5}), :line 124, :end-line 124, :max-fixed-arity 5, :fn-var true, :arglists (quote ([id-fn label-fn callback internal-model opt])), :test true}, filter-choices-regex {:protocol-inline nil, :private true, :name re-com.dropdown/filter-choices-regex, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 29, :method-params ([choices group-fn label-fn filter-text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 4}), :line 50, :end-line 50, :max-fixed-arity 4, :fn-var true, :arglists (quote ([choices group-fn label-fn filter-text])), :doc "Filter a list of choices based on a filter string using regex's (case insensitive). More powerful but can cause\n   confusion for users entering reserved characters such as [ ] * + . ( ) etc.", :test true}, single-dropdown-args-desc {:file "out/re_com/dropdown.cljs", :line 192, :column 1, :end-line 192, :end-column 32, :test true, :name re-com.dropdown/single-dropdown-args-desc}, dropdown-top {:protocol-inline nil, :private true, :name re-com.dropdown/dropdown-top, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 158, :end-line 158, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Render the top part of the dropdown, with the clickable area and the up/down arrow", :test true}, filter-choices-by-keyword {:protocol-inline nil, :name re-com.dropdown/filter-choices-by-keyword, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 33, :method-params ([choices keyword value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 3}), :line 64, :end-line 64, :max-fixed-arity 3, :fn-var true, :arglists (quote ([choices keyword value])), :doc "Filter a list of choices extra data within the choices vector", :test true}, single-dropdown {:protocol-inline nil, :name re-com.dropdown/single-dropdown, :variadic true, :file "out/re_com/dropdown.cljs", :end-column 23, :method-params ([p__5954]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 210, :end-line 210, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model], :as args}])), :doc "Render a single dropdown component which emulates the bootstrap-choosen style. Sample choices object:\n     [{:id \"AU\" :label \"Australia\"      :group \"Group 1\"}\n      {:id \"US\" :label \"United States\"  :group \"Group 1\"}\n      {:id \"GB\" :label \"United Kingdom\" :group \"Group 1\"}\n      {:id \"AF\" :label \"Afghanistan\"    :group \"Group 2\"}]", :test true}, choice-item {:protocol-inline nil, :private true, :name re-com.dropdown/choice-item, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 20, :method-params ([id label on-click internal-model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 4}), :line 92, :end-line 92, :max-fixed-arity 4, :fn-var true, :arglists (quote ([id label on-click internal-model])), :doc "Render a choice item and set up appropriate mouse events", :test true}, make-group-heading {:protocol-inline nil, :private true, :name re-com.dropdown/make-group-heading, :variadic false, :file "out/re_com/dropdown.cljs", :end-column 27, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Render a group heading", :test true}}, :name re-com.dropdown, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {align-style re-com.box, html-attr? re-com.validate, position-for-id re-com.util, deref-or-value re-com.util, css-style? re-com.validate, vector-of-maps? re-com.validate, item-for-id re-com.util, flex-child-style re-com.box, number-or-string? re-com.validate}, :requires {reagent reagent.core, reagent.core reagent.core, string clojure.string, clojure.string clojure.string, re-com.validate re-com.validate, re-com.box re-com.box, re-com.util re-com.util}, :imports nil}