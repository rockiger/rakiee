;; Analyzed by ClojureScript 0.0-2725
{:defs {vertical-pill-tabs {:protocol-inline nil, :name re-com.tabs/vertical-pill-tabs, :variadic true, :file "out/re_com/tabs.cljs", :end-column 26, :method-params ([p__6522]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 141, :end-line 141, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model tabs on-change id-fn style label-fn], :or {id-fn :id, label-fn :label}, :as args}])), :test true}, horizontal-pill-tabs {:protocol-inline nil, :name re-com.tabs/horizontal-pill-tabs, :variadic true, :file "out/re_com/tabs.cljs", :end-column 28, :method-params ([p__6517]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 126, :end-line 126, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model tabs on-change id-fn style label-fn], :or {id-fn :id, label-fn :label}, :as args}])), :test true}, pill-tabs {:protocol-inline nil, :private true, :name re-com.tabs/pill-tabs, :variadic true, :file "out/re_com/tabs.cljs", :end-column 18, :method-params ([p__6503]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 103, :end-line 103, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model tabs on-change id-fn label-fn style vertical?]}])), :test true}, vertical-bar-tabs {:protocol-inline nil, :name re-com.tabs/vertical-bar-tabs, :variadic true, :file "out/re_com/tabs.cljs", :end-column 25, :method-params ([p__6497]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 84, :end-line 84, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model tabs on-change id-fn label-fn style], :or {id-fn :id, label-fn :label}, :as args}])), :test true}, horizontal-bar-tabs {:protocol-inline nil, :name re-com.tabs/horizontal-bar-tabs, :variadic true, :file "out/re_com/tabs.cljs", :end-column 27, :method-params ([p__6492]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model tabs on-change id-fn label-fn style], :or {id-fn :id, label-fn :label}, :as args}])), :test true}, bar-tabs {:protocol-inline nil, :private true, :name re-com.tabs/bar-tabs, :variadic true, :file "out/re_com/tabs.cljs", :end-column 17, :method-params ([p__6478]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 49, :end-line 49, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model tabs on-change id-fn label-fn style vertical?]}])), :test true}, horizontal-tabs {:protocol-inline nil, :name re-com.tabs/horizontal-tabs, :variadic true, :file "out/re_com/tabs.cljs", :end-column 23, :method-params ([p__6463]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic true, :max-fixed-arity 0}), :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& {:keys [model tabs on-change id-fn label-fn style], :or {id-fn :id, label-fn :label}, :as args}])), :test true}, tabs-args-desc {:file "out/re_com/tabs.cljs", :line 12, :column 1, :end-line 12, :end-column 21, :test true, :name re-com.tabs/tabs-args-desc}}, :name re-com.tabs, :doc nil, :excludes #{}, :use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :uses {deref-or-value re-com.util, css-style? re-com.validate, vector-of-maps? re-com.validate, flex-child-style re-com.box}, :requires {re-com.validate re-com.validate, re-com.box re-com.box, re-com.util re-com.util}, :imports nil}