;; Analyzed by ClojureScript 0.0-2725
{:defs {interval {:protocol-inline nil, :name cljs-time.core/interval, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Interval, :variadic false, :max-fixed-arity 2}), :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end])), :doc "Returns an Interval representing the span between the two given DateTime.\n  Note that intervals are closed on the left and open on the right.", :test true}, in-months {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-months, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, period {:protocol-inline nil, :name cljs-time.core/period, :variadic true, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([period value] [p1 v1 kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 2} {:tag any, :variadic true, :max-fixed-arity 2}), :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([period value] [p1 v1 & kvs])), :test true}, ago {:protocol-inline nil, :name cljs-time.core/ago, :variadic false, :file "out/cljs_time/core.cljs", :end-column 11, :method-params ([period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 466, :end-line 466, :max-fixed-arity 1, :fn-var true, :arglists (quote ([period])), :doc "Returns a DateTime a supplied period before the present.\n\n  e.g. `(-> 5 years ago)`", :test true}, minutes {:protocol-inline nil, :name cljs-time.core/minutes, :variadic false, :file "out/cljs_time/core.cljs", :end-column 15, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 432, :end-line 432, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many minutes.\n  Without an argument, returns a Period representing only minutes.", :test true}, from-default-time-zone {:protocol-inline nil, :name cljs-time.core/from-default-time-zone, :variadic false, :file "out/cljs_time/core.cljs", :end-column 30, :method-params ([dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.DateTime, :variadic false, :max-fixed-arity 1}), :line 383, :end-line 383, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dt])), :doc "Assuming `dt` is in the UTC timezone, returns a DateTime\n  corresponding to the same point in calendar time as the given\n  DateTime, but for a correspondingly different absolute instant in\n  time in the default (local) timezone.\n\n  Note: This implementation uses the ECMAScript 5.1 implementation which\n  trades some historical daylight savings transition accuracy for simplicity.\n  see http://es5.github.io/#x15.9.1.8\n  ", :test true}, date? {:protocol-inline nil, :name cljs-time.core/date?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 633, :end-line 633, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, end {:protocol-inline nil, :name cljs-time.core/end, :variadic false, :file "out/cljs_time/core.cljs", :end-column 11, :method-params ([in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 503, :end-line 503, :max-fixed-arity 1, :fn-var true, :arglists (quote ([in])), :doc "Returns the end DateTime of an Interval.", :test true}, interval? {:protocol-inline nil, :name cljs-time.core/interval?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 636, :end-line 636, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, in-weeks {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-weeks, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, to-default-time-zone {:protocol-inline nil, :name cljs-time.core/to-default-time-zone, :variadic false, :file "out/cljs_time/core.cljs", :end-column 28, :method-params ([dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.DateTime, :variadic false, :max-fixed-arity 1}), :line 375, :end-line 375, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dt])), :doc "Assuming `dt` is in the UTC timezone, returns a DateTime\n  corresponding to the same absolute instant in time as the given\n  DateTime, but with calendar fields corresponding to in the default\n  (local) timezone.", :test true}, last-day-of-the-month {:protocol-inline nil, :name cljs-time.core/last-day-of-the-month, :variadic false, :file "out/cljs_time/core.cljs", :end-column 29, :method-params ([dt] [year month]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 684, :end-line 684, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dt] [year month])), :test true}, map->Interval {:protocol-inline nil, :name cljs-time.core/map->Interval, :variadic false, :file "out/cljs_time/core.cljs", :end-column 21, :method-params ([G__6332]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :methods ({:tag cljs-time.core/Interval, :variadic false, :max-fixed-arity 1}), :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__6332])), :test true}, total-days-in-whole-months {:protocol-inline nil, :private true, :name cljs-time.core/total-days-in-whole-months, :variadic false, :file "out/cljs_time/core.cljs", :end-column 35, :method-params ([interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 517, :end-line 517, :max-fixed-arity 1, :fn-var true, :arglists (quote ([interval])), :test true}, = {:file "out/cljs_time/core.cljs", :line 77, :column 1, :end-line 86, :end-column 5, :doc "**Note:** Equality in goog.date.* (and also with plain\njavascript dates) is not the same as in Joda/clj-time. Two date\nobjects representing the same instant in time in goog.date.* are not\nequal.\n\nIf you need to test for equality use either `cljs-time.core/=`, or\noptionally you can require the `cljs-time.extend` namespace which will\nextend the goog.date.* datatypes, so that clojure.core/= works as\nexpected.", :test true, :name cljs-time.core/=}, millis {:protocol-inline nil, :name cljs-time.core/millis, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many milliseconds.\n  Without an argument, returns a Period representing only milliseconds.", :test true}, weeks {:protocol-inline nil, :name cljs-time.core/weeks, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 414, :end-line 414, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many weeks.\n  Without an argument, returns a Period representing only weeks.", :test true}, days? {:protocol-inline nil, :name cljs-time.core/days?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 660, :end-line 660, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Days", :test true}, years? {:protocol-inline nil, :name cljs-time.core/years?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 645, :end-line 645, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Years", :test true}, minute {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/minute, :variadic false, :file "out/cljs_time/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, mins-ago {:protocol-inline nil, :name cljs-time.core/mins-ago, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 680, :end-line 680, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d])), :test true}, time-zone-for-offset {:protocol-inline nil, :name cljs-time.core/time-zone-for-offset, :variadic false, :file "out/cljs_time/core.cljs", :end-column 28, :method-params ([hours] [hours minutes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{clj cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 2}), :line 350, :end-line 350, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hours] [hours minutes])), :doc "Returns a timezone map for the given offset, specified either in hours or\n  hours and minutes.", :test true}, periods {:file "out/cljs_time/core.cljs", :line 134, :column 1, :end-line 134, :end-column 14, :test true, :name cljs-time.core/periods}, do-at* {:protocol-inline nil, :name cljs-time.core/do-at*, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([base-date-time body-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 749, :end-line 749, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-date-time body-fn])), :test true}, in-seconds {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-seconds, :variadic false, :file "out/cljs_time/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, after? {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/after?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 11, :method-params ([this that]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 88, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this that])), :test true}, seconds? {:protocol-inline nil, :name cljs-time.core/seconds?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 675, :end-line 675, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Seconds", :test true}, hour {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/hour, :variadic false, :file "out/cljs_time/core.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, epoch {:protocol-inline nil, :name cljs-time.core/epoch, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 0}), :line 271, :end-line 271, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for the begining of the Unix epoch in the UTC time zone.", :test true}, from-now {:protocol-inline nil, :name cljs-time.core/from-now, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([period])), :doc "Returns a DateTime a supplied period after the present.\n  e.g. `(-> 30 minutes from-now)`", :test true}, day {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/day, :variadic false, :file "out/cljs_time/core.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, in-minutes {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-minutes, :variadic false, :file "out/cljs_time/core.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, local-date-time {:protocol-inline nil, :name cljs-time.core/local-date-time, :variadic false, :file "out/cljs_time/core.cljs", :end-column 23, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.DateTime, :variadic false, :max-fixed-arity 1} {:tag goog/date.DateTime, :variadic false, :max-fixed-arity 2} {:tag goog/date.DateTime, :variadic false, :max-fixed-arity 3} {:tag goog/date.DateTime, :variadic false, :max-fixed-arity 4} {:tag goog/date.DateTime, :variadic false, :max-fixed-arity 5} {:tag goog/date.DateTime, :variadic false, :max-fixed-arity 6} {:tag goog/date.DateTime, :variadic false, :max-fixed-arity 7}), :line 313, :end-line 313, :max-fixed-arity 7, :fn-var true, :arglists (quote ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis])), :doc "Constructs and returns a new local DateTime.\nSpecify the year, month of year, day of month, hour of day, minute of hour,\nsecond of minute, and millisecond of second. Note that month and day are\n1-indexed while hour, second, minute, and millis are 0-indexed.\nAny number of least-significant components can be ommited, in which case\nthey will default to 1 or 0 as appropriate.", :test true}, in-years- {:protocol-inline nil, :private true, :name cljs-time.core/in-years-, :variadic false, :file "out/cljs_time/core.cljs", :end-column 18, :method-params ([p__6393]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 534, :end-line 534, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [start end]}])), :doc "Returns the number of standard years in the given Interval.", :test true}, overlaps? {:protocol-inline nil, :name cljs-time.core/overlaps?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 17, :method-params ([p__6411 p__6412] [start-a end-a start-b end-b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any}, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 4}), :line 613, :end-line 613, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{start-a :start, end-a :end} {start-b :start, end-b :end}] [start-a end-a start-b end-b])), :doc "With 2 arguments: Returns true of the two given Intervals overlap.\n  Note that intervals that satisfy abuts? do not satisfy overlaps?\n\n  With 4 arguments: Returns true if the range specified by start-a and end-a\n  overlaps with the range specified by start-b and end-b.", :test true}, date-time {:protocol-inline nil, :name cljs-time.core/date-time, :variadic false, :file "out/cljs_time/core.cljs", :end-column 17, :method-params ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 1} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 2} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 3} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 4} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 5} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 6} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 7}), :line 289, :end-line 289, :max-fixed-arity 7, :fn-var true, :arglists (quote ([year] [year month] [year month day] [year month day hour] [year month day hour minute] [year month day hour minute second] [year month day hour minute second millis])), :doc "Constructs and returns a new DateTime in UTC.\n\n  Specify the year, month of year, day of month, hour of day, minute if hour,\n  second of minute, and millisecond of second. Note that month and day are\n  1-indexed while hour, second, minute, and millis are 0-indexed.\n\n  Any number of least-significant components can be ommited, in which case\n  they will default to 1 or 0 as appropriate.", :test true}, first-day-of-the-month {:protocol-inline nil, :name cljs-time.core/first-day-of-the-month, :variadic false, :file "out/cljs_time/core.cljs", :end-column 30, :method-params ([dt] [year month]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 696, :end-line 696, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dt] [year month])), :test true}, default-time-zone {:protocol-inline nil, :name cljs-time.core/default-time-zone, :variadic false, :file "out/cljs_time/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 0}), :line 369, :end-line 369, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the default timezone map for the current environment.", :test true}, now {:protocol-inline nil, :name cljs-time.core/now, :variadic false, :file "out/cljs_time/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil goog/date.UtcDateTime}, :variadic false, :max-fixed-arity 0}), :line 247, :end-line 247, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for the current instant in the UTC time zone.", :test true}, ->Period {:protocol-inline nil, :name cljs-time.core/->Period, :variadic false, :file "out/cljs_time/core.cljs", :end-column 19, :method-params ([years months weeks days hours minutes seconds millis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 8}), :line 126, :end-line 126, :max-fixed-arity 8, :fn-var true, :arglists (quote ([years months weeks days hours minutes seconds millis])), :test true}, second {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/second, :variadic false, :file "out/cljs_time/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, conversion-error {:protocol-inline nil, :name cljs-time.core/conversion-error, :variadic false, :file "out/cljs_time/core.cljs", :end-column 24, :method-params ([from to]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag ignore, :variadic false, :max-fixed-arity 2}), :line 547, :end-line 547, :max-fixed-arity 2, :fn-var true, :arglists (quote ([from to])), :test true}, utc {:file "out/cljs_time/core.cljs", :line 241, :column 1, :end-line 241, :end-column 10, :test true, :name cljs-time.core/utc}, extend {:protocol-inline nil, :name cljs-time.core/extend, :variadic true, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([in by]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic true, :max-fixed-arity 1}), :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([in & by])), :doc "Returns an Interval with an end DateTime the specified Period after the end\n  of the given Interval", :test true}, months? {:protocol-inline nil, :name cljs-time.core/months?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 15, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 650, :end-line 650, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Months", :test true}, date-midnight {:protocol-inline nil, :name cljs-time.core/date-midnight, :variadic false, :file "out/cljs_time/core.cljs", :end-column 21, :method-params ([year] [year month] [year month day]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 1} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 2} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 3}), :line 276, :end-line 276, :max-fixed-arity 3, :fn-var true, :arglists (quote ([year] [year month] [year month day])), :doc "Constructs and returns a new DateTime at midnight in UTC.\n\n  Specify the year, month of year, day of month. Note that month and day are\n  1-indexed. Any number of least-significant components can be ommited, in\n  which case they will default to 1.", :test true}, plus- {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/plus-, :variadic false, :file "out/cljs_time/core.cljs", :end-column 10, :method-params ([this period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 88, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this period])), :test true}, time-now {:protocol-inline nil, :name cljs-time.core/time-now, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.DateTime, :variadic false, :max-fixed-arity 0}), :line 252, :end-line 252, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a local DateTime for the current instant without date or time zone\n  in the current time zone.", :test true}, day-of-week {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/day-of-week, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, last-day-of-the-month- {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/last-day-of-the-month-, :variadic false, :file "out/cljs_time/core.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, number-of-days-in-the-month {:protocol-inline nil, :name cljs-time.core/number-of-days-in-the-month, :variadic false, :file "out/cljs_time/core.cljs", :end-column 35, :method-params ([dt] [year month]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 690, :end-line 690, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dt] [year month])), :test true}, months {:protocol-inline nil, :name cljs-time.core/months, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 408, :end-line 408, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many months.\n  Without an argument, returns a Period representing only months.", :test true}, in-days {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-days, :variadic false, :file "out/cljs_time/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, today {:protocol-inline nil, :name cljs-time.core/today, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.Date, :variadic false, :max-fixed-arity 0}), :line 341, :end-line 341, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Constructs and returns a new local DateTime representing today's date.\n  local DateTime objects do not deal with timezones at all.", :test true}, month {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/month, :variadic false, :file "out/cljs_time/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, in-months- {:protocol-inline nil, :private true, :name cljs-time.core/in-months-, :variadic false, :file "out/cljs_time/core.cljs", :end-column 19, :method-params ([p__6390]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 520, :end-line 520, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [start end], :as interval}])), :doc "Returns the number of months in the given Interval.\n\n  For example, the interval 2nd Jan 2012 midnight to 2nd Feb 2012 midnight,\n  returns 1 month.\n\n  Likewise, 29th Dec 2011 midnight to 29th Feb 2012 midnight returns 2 months.\n\n  But also, 31st Dec 2011 midnight to 29th Feb 2012 midnight returns 2 months.\n\n  And, 28th Dec 2012 midnight to 28th Feb 2013 midnight returns 2 months.", :test true}, start {:protocol-inline nil, :name cljs-time.core/start, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 498, :end-line 498, :max-fixed-arity 1, :fn-var true, :arglists (quote ([in])), :doc "Returns the start DateTime of an Interval.", :test true}, minus {:protocol-inline nil, :name cljs-time.core/minus, :variadic true, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([dt p] [dt p ps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :line 458, :end-line 458, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dt p] [dt p & ps])), :doc "Returns a new date/time object corresponding to the given date/time\n  moved backwards by the given Period(s).", :test true}, days {:protocol-inline nil, :name cljs-time.core/days, :variadic false, :file "out/cljs_time/core.cljs", :end-column 12, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 420, :end-line 420, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many days.\n  Without an argument, returns a Period representing only days.", :test true}, period-type? {:protocol-inline nil, :name cljs-time.core/period-type?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 20, :method-params ([type x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 642, :end-line 642, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type x])), :test true}, in-hours {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-hours, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, map->Period {:protocol-inline nil, :name cljs-time.core/map->Period, :variadic false, :file "out/cljs_time/core.cljs", :end-column 19, :method-params ([G__6340]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__6340])), :test true}, at-midnight {:protocol-inline nil, :name cljs-time.core/at-midnight, :variadic false, :file "out/cljs_time/core.cljs", :end-column 19, :method-params ([datetime]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([datetime])), :test true}, DateTimeProtocol {:protocol-symbol true, :name cljs-time.core/DateTimeProtocol, :file "out/cljs_time/core.cljs", :end-column 31, :column 1, :line 88, :protocol-info {:methods {minute [[this]], after? [[this that]], hour [[this]], day [[this]], second [[this]], plus- [[this period]], day-of-week [[this]], last-day-of-the-month- [[this]], month [[this]], before? [[this that]], year [[this]], minus- [[this period]], sec [[this]], first-day-of-the-month- [[this]], milli [[this]]}}, :info nil, :end-line 88, :impls #{goog/date.DateTime goog/date.Date goog/date.UtcDateTime}, :test true}, InTimeUnitProtocol {:protocol-symbol true, :name cljs-time.core/InTimeUnitProtocol, :file "out/cljs_time/core.cljs", :end-column 33, :column 1, :line 106, :protocol-info {:methods {in-millis [[this]], in-seconds [[this]], in-minutes [[this]], in-hours [[this]], in-days [[this]], in-weeks [[this]], in-months [[this]], in-years [[this]]}}, :info nil, :end-line 106, :impls #{cljs-time/core.Period cljs-time/core.Interval}, :test true}, within? {:protocol-inline nil, :name cljs-time.core/within?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 15, :method-params ([p__6408 date] [start end date]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 598, :end-line 598, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [start end]} date] [start end date])), :doc "With 2 arguments: Returns true if the given Interval contains the given\n  DateTime. Note that if the DateTime is exactly equal to the\n  end of the interval, this function returns false.\n\n  With 3 arguments: Returns true if the start DateTime is\n  equal to or before and the end DateTime is equal to or after the test\n  DateTime.", :test true}, seconds {:protocol-inline nil, :name cljs-time.core/seconds, :variadic false, :file "out/cljs_time/core.cljs", :end-column 15, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 438, :end-line 438, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many seconds.\n  Without an argument, returns a Period representing only seconds.", :test true}, in-years {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-years, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, ->period {:file "out/cljs_time/core.cljs", :line 702, :column 1, :end-line 702, :end-column 20, :test true, :name cljs-time.core/->period}, today-at-midnight {:protocol-inline nil, :name cljs-time.core/today-at-midnight, :variadic false, :file "out/cljs_time/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 266, :end-line 266, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for today at midnight in the UTC time zone.", :test true}, ->Interval {:protocol-inline nil, :name cljs-time.core/->Interval, :variadic false, :file "out/cljs_time/core.cljs", :end-column 21, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :methods ({:tag cljs-time.core/Interval, :variadic false, :max-fixed-arity 2}), :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end])), :test true}, *sys-time* {:file "out/cljs_time/core.cljs", :line 75, :column 1, :end-line 75, :end-column 27, :dynamic true, :test true, :name cljs-time.core/*sys-time*}, before? {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/before?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 12, :method-params ([this that]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 88, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this that])), :test true}, month-range {:protocol-inline nil, :private true, :name cljs-time.core/month-range, :variadic false, :file "out/cljs_time/core.cljs", :end-column 20, :method-params ([p__6386]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 514, :end-line 514, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [start end]}])), :test true}, latest {:protocol-inline nil, :name cljs-time.core/latest, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([dt1 dt2] [dts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 491, :end-line 491, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dt1 dt2] [dts])), :doc "Returns the latest of the supplied DateTimes", :test true}, hours? {:protocol-inline nil, :name cljs-time.core/hours?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 665, :end-line 665, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Hours", :test true}, Interval {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs-time.core/Interval, :file "out/cljs_time/core.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 117, :record true, :end-line 117, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, year {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/year, :variadic false, :file "out/cljs_time/core.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, earliest {:protocol-inline nil, :name cljs-time.core/earliest, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([dt1 dt2] [dts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 484, :end-line 484, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dt1 dt2] [dts])), :doc "Returns the earliest of the supplied DateTimes", :test true}, period-fn {:protocol-inline nil, :name cljs-time.core/period-fn, :variadic false, :file "out/cljs_time/core.cljs", :end-column 17, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :test true}, period? {:protocol-inline nil, :name cljs-time.core/period?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 639, :end-line 639, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, yesterday {:protocol-inline nil, :name cljs-time.core/yesterday, :variadic false, :file "out/cljs_time/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 473, :end-line 473, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a DateTime for yesterday relative to now", :test true}, minutes? {:protocol-inline nil, :name cljs-time.core/minutes?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 670, :end-line 670, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Minutes", :test true}, today-at {:protocol-inline nil, :name cljs-time.core/today-at, :variadic false, :file "out/cljs_time/core.cljs", :end-column 16, :method-params ([hours minutes seconds millis] [hours minutes seconds] [hours minutes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 4} {:tag goog/date.UtcDateTime, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 2}), :line 733, :end-line 733, :max-fixed-arity 4, :fn-var true, :arglists (quote ([hours minutes seconds millis] [hours minutes seconds] [hours minutes])), :test true}, Period {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs-time.core/Period, :file "out/cljs_time/core.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 126, :record true, :end-line 126, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, local-date {:protocol-inline nil, :name cljs-time.core/local-date, :variadic false, :file "out/cljs_time/core.cljs", :end-column 18, :method-params ([year month day]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/date.Date, :variadic false, :max-fixed-arity 3}), :line 335, :end-line 335, :max-fixed-arity 3, :fn-var true, :arglists (quote ([year month day])), :doc "Constructs and returns a new local DateTime.\nSpecify the year, month, and day. Does not deal with timezones.", :test true}, plus {:protocol-inline nil, :name cljs-time.core/plus, :variadic true, :file "out/cljs_time/core.cljs", :end-column 12, :method-params ([dt p] [dt p ps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag #{nil any}, :variadic true, :max-fixed-arity 2}), :line 450, :end-line 450, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dt p] [dt p & ps])), :doc "Returns a new date/time corresponding to the given date/time moved\n  forwards by the given Period(s).", :test true}, minus- {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/minus-, :variadic false, :file "out/cljs_time/core.cljs", :end-column 11, :method-params ([this period]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 88, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this period])), :test true}, weeks? {:protocol-inline nil, :name cljs-time.core/weeks?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 655, :end-line 655, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns true if the given value is an instance of Weeks", :test true}, abuts? {:protocol-inline nil, :name cljs-time.core/abuts?, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([p__6417 p__6418]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 627, :end-line 627, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{start-a :start, end-a :end} {start-b :start, end-b :end}])), :doc "Returns true if Interval a abuts b, i.e. then end of a is exactly the\n  beginning of b.", :test true}, sec {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/sec, :variadic false, :file "out/cljs_time/core.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, hours {:protocol-inline nil, :name cljs-time.core/hours, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 426, :end-line 426, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many hours.\n  Without an argument, returns a Period representing only hours.", :test true}, years {:protocol-inline nil, :name cljs-time.core/years, :variadic false, :file "out/cljs_time/core.cljs", :end-column 13, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 0} {:tag cljs-time.core/Period, :variadic false, :max-fixed-arity 1}), :line 402, :end-line 402, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [n])), :doc "Given a number, returns a Period representing that many years.\n  Without an argument, returns a Period representing only years.", :test true}, first-day-of-the-month- {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/first-day-of-the-month-, :variadic false, :file "out/cljs_time/core.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, in-millis {:protocol-inline nil, :protocol cljs-time.core/InTimeUnitProtocol, :name cljs-time.core/in-millis, :variadic false, :file "out/cljs_time/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, milli {:protocol-inline nil, :protocol cljs-time.core/DateTimeProtocol, :name cljs-time.core/milli, :variadic false, :file "out/cljs_time/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 88, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}}, :name cljs-time.core, :doc "### The core namespace for date-time operations in the cljs-time library.\n\n  Create a DateTime instance with date-time (or a local DateTime instance with local-date-time),\n  specifying the year, month, day, hour, minute, second, and millisecond:\n\n    => (date-time 1986 10 14 4 3 27 456)\n    #<DateTime 1986-10-14T04:03:27.456Z>\n\n    => (local-date-time 1986 10 14 4 3 27 456)\n    #<DateTime 1986-10-14T04:03:27.456>\n\n  Less-significant fields can be omitted:\n\n    => (date-time 1986 10 14)\n    #<DateTime 1986-10-14T00:00:00.000Z>\n\n    => (local-date-time 1986 10 14)\n    #<DateTime 1986-10-14T00:00:00.000>\n\n  Get the current time with (now) and the start of the Unix epoch with (epoch).\n\n  Once you have a date-time, use accessors like hour and second to access the\n  corresponding fields:\n\n    => (hour (date-time 1986 10 14 22))\n    22\n\n    => (hour (local-date-time 1986 10 14 22))\n    22\n\n  The functions after? and before? determine the relative position of two\n  DateTime instances:\n\n    => (after? (date-time 1986 10) (date-time 1986 9))\n    true\n\n    => (after? (local-date-time 1986 10) (local-date-time 1986 9))\n    true\n\n  Often you will want to find a date some amount of time from a given date. For\n  example, to find the time 1 month and 3 weeks from a given date-time:\n\n    => (plus (date-time 1986 10 14) (months 1) (weeks 3))\n    #<DateTime 1986-12-05T00:00:00.000Z>\n\n    => (plus (local-date-time 1986 10 14) (months 1) (weeks 3))\n    #<DateTime 1986-12-05T00:00:00.000Z>\n\n  An Interval is used to represent the span of time between two DateTime\n  instances. Construct one using interval, then query them using within?,\n  overlaps?, and abuts?\n\n    => (within? (interval (date-time 1986) (date-time 1990)) (date-time 1987))\n    true\n\n  To find the amount of time encompased by an interval, use in-seconds and\n  in-minutes:\n\n    => (in-minutes (interval (date-time 1986 10 2) (date-time 1986 10 14)))\n    17280\n\n  Note that all functions in this namespace work with Joda objects or ints. If\n  you need to print or parse date-times, see cljs-time.format. If you need to\n  ceorce date-times to or from other types, see cljs-time.coerce.", :excludes #{= second extend}, :use-macros nil, :require-macros nil, :uses {leap-year? cljs-time.internal.core, format cljs-time.internal.core}, :requires {goog.i18n.TimeZone goog.i18n.TimeZone, goog.date.UtcDateTime goog.date.UtcDateTime, goog.date.DateTime goog.date.DateTime, goog.date.Date goog.date.Date, string clojure.string, clojure.string clojure.string, cljs-time.internal.core cljs-time.internal.core, internal cljs-time.internal.core}, :imports nil}