;; Analyzed by ClojureScript 0.0-2725
{:defs {default-fixture {:protocol-inline nil, :private true, :name cljs.test/default-fixture, :variadic false, :file "out/cljs/test.cljs", :end-column 24, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 378, :end-line 378, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "The default, empty, fixture function.  Just calls its argument.", :test true}, test-var {:protocol-inline nil, :name cljs.test/test-var, :variadic false, :file "out/cljs/test.cljs", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 357, :end-line 357, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "If v has a function in its :test metadata, calls that function,\n  add v to :testing-vars property of env.", :test true}, do-report {:protocol-inline nil, :name cljs.test/do-report, :variadic false, :file "out/cljs/test.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 347, :end-line 347, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, testing-contexts-str {:protocol-inline nil, :name cljs.test/testing-contexts-str, :variadic false, :file "out/cljs/test.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 248, :end-line 248, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a string representation of the current test context. Joins\n  strings in *testing-contexts* with spaces.", :test true}, join-fixtures {:protocol-inline nil, :name cljs.test/join-fixtures, :variadic false, :file "out/cljs/test.cljs", :end-column 21, :method-params ([fixtures]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 389, :end-line 389, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fixtures])), :doc "Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty.", :test true}, inc-report-counter! {:protocol-inline nil, :name cljs.test/inc-report-counter!, :variadic false, :file "out/cljs/test.cljs", :end-column 27, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name])), :doc "Increments the named counter in *report-counters*, a ref to a map.\n  Does nothing if *report-counters* is nil.", :test true}, get-current-env {:protocol-inline nil, :name cljs.test/get-current-env, :variadic false, :file "out/cljs/test.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cljs.core/IMap}, :variadic false, :max-fixed-arity 0}), :line 226, :end-line 226, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, file-and-line {:protocol-inline nil, :name cljs.test/file-and-line, :variadic false, :file "out/cljs/test.cljs", :end-column 21, :method-params ([exception depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 332, :end-line 332, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exception depth])), :test true}, report {:file "out/cljs/test.cljs", :line 261, :column 1, :end-line 267, :end-column 10, :doc "Generic reporting function, may be overridden to plug in\n   different report formats (e.g., TAP, JUnit).  Assertions such as\n   'is' call 'report' to indicate results.  The argument given to\n   'report' will be a map with a :type key.", :dynamic true, :test true, :name cljs.test/report}, compose-fixtures {:protocol-inline nil, :name cljs.test/compose-fixtures, :variadic false, :file "out/cljs/test.cljs", :end-column 24, :method-params ([f1 f2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 2}), :line 383, :end-line 383, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f1 f2])), :doc "Composes two fixture functions, creating a new fixture function\n  that combines their behavior.", :test true}, js-line-and-column {:protocol-inline nil, :name cljs.test/js-line-and-column, :variadic false, :file "out/cljs/test.cljs", :end-column 26, :method-params ([stack-element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stack-element])), :test true}, clear-env! {:protocol-inline nil, :name cljs.test/clear-env!, :variadic false, :file "out/cljs/test.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 235, :end-line 235, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, set-env! {:protocol-inline nil, :name cljs.test/set-env!, :variadic false, :file "out/cljs/test.cljs", :end-column 16, :method-params ([new-env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-env])), :test true}, mapped-line-and-column {:protocol-inline nil, :name cljs.test/mapped-line-and-column, :variadic false, :file "out/cljs/test.cljs", :end-column 30, :method-params ([filename line column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj cljs.core/IVector any}, :variadic false, :max-fixed-arity 3}), :line 314, :end-line 314, :max-fixed-arity 3, :fn-var true, :arglists (quote ([filename line column])), :test true}, test-vars {:protocol-inline nil, :name cljs.test/test-vars, :variadic false, :file "out/cljs/test.cljs", :end-column 17, :method-params ([vars]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 395, :end-line 395, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vars])), :doc "Groups vars by their namespace and runs test-vars on them with\n  appropriate fixtures assuming they are present in the current\n  testing environment.", :test true}, successful? {:protocol-inline nil, :name cljs.test/successful?, :variadic false, :file "out/cljs/test.cljs", :end-column 19, :method-params ([summary]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([summary])), :doc "Returns true if the given test summary indicates all tests\n  were successful, false otherwise.", :test true}, empty-env {:protocol-inline nil, :name cljs.test/empty-env, :variadic false, :file "out/cljs/test.cljs", :end-column 17, :method-params ([] [reporter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0} {:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [reporter])), :test true}, testing-vars-str {:protocol-inline nil, :name cljs.test/testing-vars-str, :variadic false, :file "out/cljs/test.cljs", :end-column 24, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns a string representation of the current test.  Renders names\n  in *testing-vars* as a list, then the source file and line of\n  current assertion.", :test true}, *current-env* {:file "out/cljs/test.cljs", :line 224, :column 1, :end-line 224, :end-column 30, :dynamic true, :test true, :name cljs.test/*current-env*}, update-current-env! {:protocol-inline nil, :name cljs.test/update-current-env!, :variadic true, :file "out/cljs/test.cljs", :end-column 27, :method-params ([ks f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 2}), :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ks f & args])), :test true}, js-filename {:protocol-inline nil, :name cljs.test/js-filename, :variadic false, :file "out/cljs/test.cljs", :end-column 19, :method-params ([stack-element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 311, :end-line 311, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stack-element])), :test true}}, :name cljs.test, :doc nil, :excludes #{}, :use-macros nil, :require-macros {clojure.template clojure.template, temp clojure.template}, :uses nil, :requires {clojure.string clojure.string, string clojure.string}, :imports nil}