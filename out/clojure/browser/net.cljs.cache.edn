;; Analyzed by ClojureScript 0.0-2725
{:defs {xpc-config-fields {:file "out/clojure/browser/net.cljs", :line 73, :column 1, :end-line 73, :end-column 24, :test true, :name clojure.browser.net/xpc-config-fields}, xhr-connection {:protocol-inline nil, :name clojure.browser.net/xhr-connection, :variadic false, :file "out/clojure/browser/net.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag goog/net.XhrIo, :variadic false, :max-fixed-arity 0}), :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns an XhrIo connection", :test true}, xpc-connection {:protocol-inline nil, :name clojure.browser.net/xpc-connection, :variadic false, :file "out/clojure/browser/net.cljs", :end-column 22, :method-params ([] [config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{goog/net.xpc.CrossPageChannel clj-nil}, :variadic false, :max-fixed-arity 0} {:tag goog/net.xpc.CrossPageChannel, :variadic false, :max-fixed-arity 1}), :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([] [config])), :doc "When passed with a config hash-map, returns a parent\n  CrossPageChannel object. Keys in the config hash map are downcased\n  versions of the goog.net.xpc.CfgFields enum keys,\n  e.g. goog.net.xpc.CfgFields.PEER_URI becomes :peer_uri in the config\n  hash.\n\n  When passed with no args, creates a child CrossPageChannel object,\n  and the config is automatically taken from the URL param 'xpc', as\n  per the CrossPageChannel API.", :test true}, ICrossPageChannel {:protocol-symbol true, :name clojure.browser.net/ICrossPageChannel, :file "out/clojure/browser/net.cljs", :end-column 32, :column 1, :line 86, :protocol-info {:methods {register-service [[this service-name fn] [this service-name fn encode-json?]]}}, :info nil, :end-line 86, :impls #{goog/net.xpc.CrossPageChannel}, :test true}, *timeout* {:file "out/clojure/browser/net.cljs", :line 19, :column 1, :end-line 19, :end-column 16, :test true, :name clojure.browser.net/*timeout*}, connect {:protocol-inline nil, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/connect, :variadic false, :file "out/clojure/browser/net.cljs", :end-column 12, :method-params ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4}), :line 30, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3])), :test true}, event-types {:file "out/clojure/browser/net.cljs", :line 21, :column 1, :end-line 21, :end-column 18, :test true, :name clojure.browser.net/event-types}, close {:protocol-inline nil, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/close, :variadic false, :file "out/clojure/browser/net.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 30, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, register-service {:protocol-inline nil, :protocol clojure.browser.net/ICrossPageChannel, :name clojure.browser.net/register-service, :variadic false, :file "out/clojure/browser/net.cljs", :end-column 21, :method-params ([this service-name fn] [this service-name fn encode-json?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4}), :line 86, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this service-name fn] [this service-name fn encode-json?])), :test true}, IConnection {:protocol-symbol true, :name clojure.browser.net/IConnection, :file "out/clojure/browser/net.cljs", :end-column 26, :column 1, :line 30, :protocol-info {:methods {connect [[this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]], transmit [[this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]], close [[this]]}}, :info nil, :end-line 30, :impls #{goog/net.xpc.CrossPageChannel goog/net.XhrIo}, :test true}, transmit {:protocol-inline nil, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/transmit, :variadic false, :file "out/clojure/browser/net.cljs", :end-column 13, :method-params ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4} {:tag any, :variadic false, :max-fixed-arity 5} {:tag any, :variadic false, :max-fixed-arity 6}), :line 30, :end-line 36, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5])), :test true}}, :name clojure.browser.net, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {Uri goog.Uri, CrossPageChannel goog.net.xpc.CrossPageChannel, CfgFields goog.net.xpc.CfgFields, EventType goog.net.EventType, XhrIo goog.net.XhrIo, gjson goog.json, goog.json goog.json, clojure.browser.event clojure.browser.event, event clojure.browser.event}, :imports {Uri goog.Uri, CrossPageChannel goog.net.xpc.CrossPageChannel, CfgFields goog.net.xpc.CfgFields, XhrIo goog.net.XhrIo, EventType goog.net.EventType}}