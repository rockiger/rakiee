;; Analyzed by ClojureScript 0.0-2725
{:defs {expose {:protocol-inline nil, :name clojure.browser.event/expose, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 14, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :test true}, listen-once {:protocol-inline nil, :name clojure.browser.event/listen-once, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 19, :method-params ([src type fn] [src type fn capture?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4}), :line 55, :end-line 55, :max-fixed-arity 4, :fn-var true, :arglists (quote ([src type fn] [src type fn capture?])), :test true}, unlisten {:protocol-inline nil, :name clojure.browser.event/unlisten, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 16, :method-params ([src type fn] [src type fn capture?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4}), :line 64, :end-line 64, :max-fixed-arity 4, :fn-var true, :arglists (quote ([src type fn] [src type fn capture?])), :test true}, has-listener {:protocol-inline nil, :name clojure.browser.event/has-listener, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 20, :method-params ([obj opt_type opt_capture]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 3}), :line 96, :end-line 96, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj opt_type opt_capture])), :test true}, all-listeners {:protocol-inline nil, :name clojure.browser.event/all-listeners, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 21, :method-params ([obj type capture]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 3}), :line 92, :end-line 92, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj type capture])), :test true}, get-listener {:protocol-inline nil, :name clojure.browser.event/get-listener, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 20, :method-params ([src type listener opt_capt opt_handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 5}), :line 91, :end-line 91, :max-fixed-arity 5, :fn-var true, :arglists (quote ([src type listener opt_capt opt_handler])), :test true}, unique-event-id {:protocol-inline nil, :name clojure.browser.event/unique-event-id, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 23, :method-params ([event-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-type])), :test true}, fire-listeners {:protocol-inline nil, :name clojure.browser.event/fire-listeners, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 22, :method-params ([obj type capture event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 4}), :line 84, :end-line 84, :max-fixed-arity 4, :fn-var true, :arglists (quote ([obj type capture event])), :test true}, event-types {:protocol-inline nil, :protocol clojure.browser.event/IEventType, :name clojure.browser.event/event-types, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 16, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, total-listener-count {:protocol-inline nil, :name clojure.browser.event/total-listener-count, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 87, :end-line 87, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, IEventType {:protocol-symbol true, :name clojure.browser.event/IEventType, :file "out/clojure/browser/event.cljs", :end-column 25, :column 1, :line 16, :protocol-info {:methods {event-types [[this]]}}, :info nil, :end-line 16, :impls #{goog/events.EventTarget js/Element}, :test true}, listen {:protocol-inline nil, :name clojure.browser.event/listen, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 14, :method-params ([src type fn] [src type fn capture?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3} {:tag any, :variadic false, :max-fixed-arity 4}), :line 46, :end-line 46, :max-fixed-arity 4, :fn-var true, :arglists (quote ([src type fn] [src type fn capture?])), :test true}, unlisten-by-key {:protocol-inline nil, :name clojure.browser.event/unlisten-by-key, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 23, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key])), :test true}, remove-all {:protocol-inline nil, :name clojure.browser.event/remove-all, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 18, :method-params ([opt_obj opt_type opt_capt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 3}), :line 100, :end-line 100, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opt_obj opt_type opt_capt])), :test true}, dispatch-event {:protocol-inline nil, :name clojure.browser.event/dispatch-event, :variadic false, :file "out/clojure/browser/event.cljs", :end-column 22, :method-params ([src event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src event])), :test true}}, :name clojure.browser.event, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {EventType goog.events.EventType, EventTarget goog.events.EventTarget, goog.events goog.events, events goog.events}, :imports {EventTarget goog.events.EventTarget, EventType goog.events.EventType}}