;; Analyzed by ClojureScript 0.0-2725
{:defs {connect {:protocol-inline nil, :name clojure.browser.repl/connect, :variadic false, :file "out/clojure/browser/repl.cljs", :end-column 15, :method-params ([repl-server-url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([repl-server-url])), :doc "Connects to a REPL server from an HTML document. After the\n  connection is made, the REPL will evaluate forms in the context of\n  the document that called this function.", :test true}, start-evaluator {:protocol-inline nil, :name clojure.browser.repl/start-evaluator, :variadic false, :file "out/clojure/browser/repl.cljs", :end-column 23, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Start the REPL server connection.", :test true}, wrap-message {:protocol-inline nil, :name clojure.browser.repl/wrap-message, :variadic false, :file "out/clojure/browser/repl.cljs", :end-column 20, :method-params ([t data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 2}), :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t data])), :test true}, order {:file "out/clojure/browser/repl.cljs", :line 55, :column 1, :end-line 55, :end-column 12, :test true, :name clojure.browser.repl/order}, send-print {:protocol-inline nil, :name clojure.browser.repl/send-print, :variadic false, :file "out/clojure/browser/repl.cljs", :end-column 18, :method-params ([url data] [url data n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 41, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists (quote ([url data] [url data n])), :doc "Send data to be printed in the REPL. If there is an error, try again\n  up to 10 times.", :test true}, send-result {:protocol-inline nil, :name clojure.browser.repl/send-result, :variadic false, :file "out/clojure/browser/repl.cljs", :end-column 19, :method-params ([connection url data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([connection url data])), :test true}, evaluate-javascript {:protocol-inline nil, :name clojure.browser.repl/evaluate-javascript, :variadic false, :file "out/clojure/browser/repl.cljs", :end-column 27, :method-params ([conn block]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil string}, :variadic false, :max-fixed-arity 2}), :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conn block])), :doc "Process a single block of JavaScript received from the server", :test true}, repl-print {:protocol-inline nil, :name clojure.browser.repl/repl-print, :variadic false, :file "out/clojure/browser/repl.cljs", :end-column 18, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, xpc-connection {:file "out/clojure/browser/repl.cljs", :line 21, :column 1, :end-line 21, :end-column 21, :test true, :name clojure.browser.repl/xpc-connection}}, :name clojure.browser.repl, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {event clojure.browser.event, clojure.browser.event clojure.browser.event, clojure.browser.net clojure.browser.net, net clojure.browser.net}, :imports nil}